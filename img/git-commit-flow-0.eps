%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 385.000000 146.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 385 146
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 385 146
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /three put
dup 34 /four put
dup 35 /two put
dup 36 /zero put
dup 37 /d put
dup 38 /e put
dup 39 /one put
dup 40 /c put
dup 41 /a put
dup 42 /six put
dup 43 /eight put
dup 44 /f put
dup 45 /five put
dup 46 /T put
dup 47 /i put
dup 48 /m put
dup 49 /H put
dup 50 /E put
dup 51 /A put
dup 52 /D put
dup 53 /asciitilde put
dup 54 /asciicircum put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<





0175B2DF120174B26F120175B22F120175B23F120175B2EF120174B29F120174B21F120174B2EF120173B20F140173B21F140173B22F140173B23F140173B25F140173B26F140173B27F140173B2AF140173B28F140174B2AF140174B2BF140174B2CF140174B22F140175B23F140175
00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/eight 8 def
/A 9 def
/D 10 def
/E 11 def
/H 12 def
/T 13 def
/asciicircum 14 def
/a 15 def
/c 16 def
/d 17 def
/e 18 def
/f 19 def
/i 20 def
/m 21 def
/asciitilde 22 def
/ogonek 23 def
/U.smcp 24 def
/Uogonek.smcp 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4247813 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693441BFA40888AF905FF75E47F70DE4CD49D4BBBBBA99C8B9C05B033FB8DE22D7D3FF19D06CB555A6AC06A365378D4943652CD0F3F51165FA5F08A351EFEDF345EDCFEF3C151F56CCA897DB8A76B981826ACAA4953845657FC886AFB7954652165B24D29CC6A5C2ABDC33FA3509F82D4E5880931B18355702DF927A4A1E5C8FC4F4E7EDA3497DBBCD67AFCB8FFE30EF9774395212587B5ABB98C35CD445CF73D94861298C5383978B23F07A813F152547C9175258395C74E457EC92F17F85C94F0DA517C0816D1AD249DF38EF57DFD104836CCAE83D1D2851C47DD17E9DEEB8526F20E6547A6F6629AD7F1EE8DA35FDF231F5AA3BC243404CFEFA01AA52DAC26140D06852DA135F19C87120B90945E1BAC6B6DD8071946692C2177BCA008DB299497CEBDE3706F538594B64C7D4FD2AC114F003A67FDAAC1BEC1890E868BAF9A75E1987918F339F2839D3E839FB1F1C9C016CFC770274EB43776D26FA09400B36AE53AEC94054AB04A1C0CF04F3CBDF593397960D2D6A3848AB2CD9CC43A5506E37AEB4B6D8FFD916B1E20D7E25CECEAC82D2981BD30E6CE699F3AD412D79609562384D29C85CA38A74009C55C8881186B28E0D198061F85D663BE9A8258B55C86DDEF0643FA2A49181277E475BA8EFB8F1C0C8F1EAD198FE3A45CB89A33DFDC62EEFDD7A404DBAF60155C42F315406A9278CB293E11E866D7536B7FAA401D42E9A15566798E94A84DB571185A8B430001249D5F6F24A824101CC96B064CDD12195586E110A7D1EAFF31649FD846630154F67CFC60
FDCE5DC6FCDDE8EC1078D832815FA0935D58EB591E939B0F14E5436948F2467CA6C678568A129160816324BD5BE144350F3C2DB4A5E7AB3D545E8BD75AEBCF499A9184B38797F4D3A8B197007C14B3D69EFC7C0BFD72BB0296DD1EFC142A71857AC9FDA93C005F6D4AC9FDE118E69CBC458229332128BEF08D37318512D193DEA96A0D58CD567AAF03B67CEA8C5D9DBCBDE980112B98B4E9629F19E4924D84BDA09BEDC49C6E46D0E195F3B7D7CF1D0F41E873C8586226ABBDF69B988827D9C94EAEB3A85CCB809E18A9B63B5569FB9692CC91B7317BD6532E3BE92F960B0732AC0B9254FDEB2AD175FB8970D993B6C15E84FEC4C8E9BBAEC77DD373DA88930EBECA6D31E7AE4706088470FC8C38480691ACD1B3B4CDAA0E7FC4F71396B027D9CABA42B1341B1B7B8B275732A6A369F89050277B7D06007085FEF3FB8521464C84B292F98C04CA668059D70C9D4636AF41D6217D27B66916464ECDD8D46566137518CDCE3771C5140E3839FD2A75EB27AD439AA97A960E96C09282E753000F2BE8CF0F8E7760AC4DE2C1AC816AE49B5BEA783815AE99202F5A740A4B5F1C7C8B204CDC0ABFB85A42A8DA2B725D650D49EEA9133FB7FEAA46225610DEE660C24BB3E7F2B969F425EEDE37C76B0ECEDD5B72DC5E3F8B61C178A91897421CF3B057A282B0BA1B1AF9CC342872BC629FF2D6C254B748F28AC6A1469FE98544CB5BA0E447A68203C8AF237106215F51884FFCD90DEC9D40F2D2828B622F5D8C6ED23E474C47233F83B576954ADBA7EA60311DA46528A4ED8167D1F59F273EB10F9685CCCA55A38104B65F43EC43CFCA05DF425EF81D903AC337A6983D909427A17837AD69735B3B99B00ED75E5D6AA4EEF1353FDE23650C429A9848647D21D9215C4D58FC66E9D8E10C3BBB876B28A2484D755546FE01080311202D7C92A3346FBF6C52FD9578AB1D08E2315FD6956492191B9841F4A89A730E9F960A6CD4C1F00C9F4DCBF9A68C87CA97596D03CF06C6289123D4109A6D04CEE97AB35CD04162B766A86461B5A56CCC2540C890D0F2C49BA8995325D67FC92C38E0266707B61EDE962FBD761A5403DC5B4396DD4210168AC6610AE6B9123264E638586BBCFBAE5A4B7DEC897C4712C3A5DA05618A2887A941F0CF7F371AD93816ECC6AEF20C4866A7E6947B4BE9D33B9059DC5F48221EC5CCDCB4011B80F5560AFC77D92407B872EBDB3304609C34320B9FCF8EFBCE421C91706EA9372344B3394E83096284518A609F83DF2BFAF7719ED27733DD963B5E28C2777CDC786EBC0A37C5985E02D86556D4828E04E6BCBAFB205ACA4A2F7645C2489687D7B104F4F74534E1DA2961D91506235ADE0776A72A8C115A86DF1C5091A6D9C9E48484EBDFE6D5B19A08B67FB1FCF0488CDCAD9E84176098F40C903FA6F4C29AD596E8DBBF613F88ED21465F46
96DF0BE1923AEFDFA99AE6A6365F0555AB498FA8179945321D2AFC24B6D21811C3B7F2798B7F9237F4102A20CC465A068FBD6ED1AE67CBFA7DE144B59DE2D684B27EF27E606DF889188D161879BA71FA95BDE98D59A72E4CBCCB0EA9924EC6C5192C504305A9913C4C55A2ED6C49766327FD8328B4580369A9B2F62B5E3314A5D54A380746CE9C233F8160FD95284A419C804CC0818474D54092B7391912769F699815BCB917EC19374D25BD212DDBE59871E7C198D75BADE3B19FFA40749407E10BF4D3A3799833D2043A43A2FCC68C29E4D83F23A6B113A8D6A8371859C6B239E837155569B1640C3A7A50015C7E59FA960DCAC4CC0234426DF19B72B973B97FF0599D5AC535CC0D08671CF02D2B79E0B486587BA9FF49D90664FCE7667E13F43C16679AF582FC19D58009716064F9BEECB7F13FDADD8D586534E43E2256CF6F96A4DA06B4355F6DEC19089059FF387D30EFD1D10AD58C422A11F6C7B49A5BE4B43A7EB646A006BDBC8E048A931F0E20804FC473B2E7474DBC15BE955B3A7017BE4E627D73274ABCC4B62DF201414541AC709AE4DFA8A0D0B41E6A659C31F49EBDA3C18C0F2B43844A02B7E21D19B6729C4750F556C5B908861ED2091912F8067F3925FCBBF9C765200F818D6A02933AB18645FA39CF552A0A152EF44236B239A02BDB1A144B643F5B05D995F11E82E623C937208C4A8FB09A42EFEE239FAB46F8E9CF77D542B2DACC16FE60BA49F30EE3147CE3C67E20D7F2D466416D0C2F5A144C4E1482B7B7ADD9284B20FDD31163E1878F915C9D2CC9FD2BE88D03A0071DECFA7986EB6E263391C6D8874E6675775B885197CE9CB3CB771BF6401D39E110208AFCDDC246B718CB9DE20110DF324933173036B69585DCBB62AFB743F8E018EC6977D597DCEB810E57824E73261995EC94558BA5BC111FE22822F697922F365B17B00C36D39AF68E66E7123893DA457977807DF32C6830ACBDD34C31122960904ED5C457EC911A0F533EF39CAC660ED785E6B9C3D67DEA5AFED2AED32C965A196EA2CF3F61A6EF57B423D8547EF266E465A6450937E72817E1300EFC294CBF2091F0EDF0B22E7B3A7FA78CD139FF92FBAA941FE269548EF77133C8920E2223D417B08FE8C7406E6A717BACDD0091D32295ED56D7A11DA661D1D35A8E079CF5762DFDEEA1ACCA8577D61EAAC6292D9BF9D1DC38D7F31B8E86BEA5B4F2D0A6DBCCFB82D99B8C8B469C6A88CF41D92A0537659A7A8AB9FAFE00D2C578AC9957F9C268BA1CA2334EDF2BC79286F2D66D55D926465451F3D55EEAE54AA5421C67EB5FF260678EDEB14485E4BC1EF6F8057867135E64DDD2BF8E997733C1BB4593308B9CA88889DA3F6E3D5879B4E18596AD84533C5EFF47251DCABB0FA4C714A7A8DC5EA55E7B83C4B0AA4B03CDC0FE7B51C848A1AC18A68AC63312B5054DA338
189B3E4F5BF6A403CAECE0864059F73C35FB98EFB4D9EC46785B4EC42D02A4CED3270931E0B0877BC357B0E6CEBDE11566C6EB6B4A5BD59837A769E59B58AB9EFE737874DDEC676107AB0848B7F9C13450A7484E0D137BCE9BE00547EC123FA190FEC0247A38AE76E4722FCDB9C065B2D2DA69B68613EF374520EDB76A0FAED8B052F7408671D50B59DCBF62A296F4A82B267B633EC4FB29F089800931B6AFA960DE4BD1EF768EFDCC0C9C46AB610A423E2CF30358DFFFC7C6D06B5966ABBF73FE6957BC87CDE18A367EEFD756F14BE361FCD834560356A1661A17B2A5AE9C5C8517677A7484912BD7317D09132B5AEF81223F594F51BAEA585852FB97762266FF270A2F1B74E5226D8D4BB6DD86FA4D491CBC1037F025145C521E165C4A943ABF719CB3A20DA1FC4B94C00F6D002431887A3289D39EEE81D51CB8AFAA2960D89CB1EB79AA4C7A380EE35B0BC9D88F3E1B9DE778CD060B68A4802134475489D2E85D7E7B59EF5F449FD03A0427ADBD22653DA7DDDBD836C533EE260934FAFC5A867AF103D4C30404DCD595986909C609AC441352633A98C27C1D37AF082771F64F624682E87858E93294B598E3E645CA94D7239C2B1BA0957596B833AB290D7308D842A07A5448ACE6C3F9774A153806B5EC31CA706768A46DEAA68C46B8CE23A67004BA4C5A4996F01C1A9FAD682867D614E8CAC83712D546EC459393D195CE84B60C35B380ABBCC662A67C39B4D555DC60DDE581080968A4D076A8E1962DECCC704A800EAD532C57109EDACD58846F0C329721BC38A565694A9B693E7F6EAF7C5D8821419C647297CD6B7C2960808E08DE8BE9F96889318FC037E3219108AB695305B8C4497F724A014904B1632042FEE386E70DC1465AC6BBCB93E929696E8D49019A48B982C72135D14F40C77ACEA377D9709A0F27E4BA8194A9220A66D824F141D906C8DF9F7BA44A87E9306B3D3DB2BC51B12E7849149FEADAAEC62D8320D3F3162CE5903D17AB8DF6A9B972D05EAEE855BBC92FBF308406E6E56223B88D081759F15C2ED62775C05EE1FC9AAF3230AD5B6EC929C245D2D528BCAC61F29C7A0EACB680D224D1BF5090D94FFCC7BE83888186BCEF9ED15A87F409228B634049A37CF92552C71B5F92C7D334A479EC901AB009E2DCD8572CC45AA1C675E0202D7E832E6EA13C8B660EA1F0C8763E5BA150524F91C64AB0E69F0F8440996072E3B0CB4259EF920EEF021FA2312E2B8E1C37E2961178B1B530EAB9207F8500296DAC89E2072D3DC028EEF1348B2FFB7E73F6CEDE04027A924C04D44CBF68DDF6A14DEC1B9AF99857F42A3798CCEAFA698E8D8D44024AF5AEEE149276C0EECBA6303F87075BEE08251CCAFA1F35749A0BEE9B57731F8314EAA5D2C1353185A7D5937F7D498A93CEA523C6C74B3429B8291B2375BFD941D56BF659A24D3FEA0E
3A8ED7B356C1DAE6940D7B60E29A730067FB1DD3DB68514ACA13EB09D792CC5EF8169904DCA76FF92A93554161124BB2A2BB71E819DF1783F11B365CBF4774
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 385 146 rc
-619 869 m
870 869 l
870 -63 l
-619 -63 l
h
-619 869 m
f
123.1048 84.113953 m
126.61951 87.628685 132.31799 87.628685 135.8327 84.113953 c
139.34744 80.599236 139.34744 74.900764 135.8327 71.386047 c
132.31799 67.871315 126.61951 67.871315 123.1048 71.386047 c
119.59007 74.900764 119.59007 80.599236 123.1048 84.113953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
742.1048 784.88605 m
745.61951 781.37134 751.31799 781.37134 754.8327 784.88605 c
758.34741 788.40076 758.34741 794.09924 754.8327 797.61395 c
751.31799 801.12866 745.61951 801.12866 742.1048 797.61395 c
738.59009 794.09924 738.59009 788.40076 742.1048 784.88605 c
S
0 i
1 1 1 sc
CM
222.1048 84.113953 m
225.61951 87.628685 231.31799 87.628685 234.8327 84.113953 c
238.34744 80.599236 238.34744 74.900764 234.8327 71.386047 c
231.31799 67.871315 225.61951 67.871315 222.1048 71.386047 c
218.59006 74.900764 218.59006 80.599236 222.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
841.1048 784.88605 m
844.61951 781.37134 850.31799 781.37134 853.8327 784.88605 c
857.34741 788.40076 857.34741 794.09924 853.8327 797.61395 c
850.31799 801.12866 844.61951 801.12866 841.1048 797.61395 c
837.59009 794.09924 837.59009 788.40076 841.1048 784.88605 c
S
0 i
1 1 1 sc
CM
294.1048 84.113953 m
297.61951 87.628685 303.31799 87.628685 306.8327 84.113953 c
310.34744 80.599236 310.34744 74.900764 306.8327 71.386047 c
303.31799 67.871315 297.61951 67.871315 294.1048 71.386047 c
290.59006 74.900764 290.59006 80.599236 294.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
913.1048 784.88605 m
916.61951 781.37134 922.31799 781.37134 925.8327 784.88605 c
929.34741 788.40076 929.34741 794.09924 925.8327 797.61395 c
922.31799 801.12866 916.61951 801.12866 913.1048 797.61395 c
909.59009 794.09924 909.59009 788.40076 913.1048 784.88605 c
S
0 i
1 1 1 sc
CM
348.1048 84.113953 m
351.61951 87.628685 357.31799 87.628685 360.8327 84.113953 c
364.34744 80.599236 364.34744 74.900764 360.8327 71.386047 c
357.31799 67.871315 351.61951 67.871315 348.1048 71.386047 c
344.59006 74.900764 344.59006 80.599236 348.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
967.1048 784.88605 m
970.61951 781.37134 976.31799 781.37134 979.8327 784.88605 c
983.34741 788.40076 983.34741 794.09924 979.8327 797.61395 c
976.31799 801.12866 970.61951 801.12866 967.1048 797.61395 c
963.59009 794.09924 963.59009 788.40076 967.1048 784.88605 c
S
0 i
1 1 1 sc
CM
24.104795 84.113953 m
27.619513 87.628685 33.317989 87.628685 36.832703 84.113953 c
40.347439 80.599236 40.347439 74.900764 36.832703 71.386047 c
33.317989 67.871315 27.619513 67.871315 24.104795 71.386047 c
20.590061 74.900764 20.590061 80.599236 24.104795 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
643.1048 784.88605 m
646.61951 781.37134 652.31799 781.37134 655.8327 784.88605 c
659.34741 788.40076 659.34741 794.09924 655.8327 797.61395 c
652.31799 801.12866 646.61951 801.12866 643.1048 797.61395 c
639.59009 794.09924 639.59009 788.40076 643.1048 784.88605 c
S
0 i
1 1 1 sc
CM
69.104797 84.113953 m
72.619514 87.628685 78.317986 87.628685 81.832703 84.113953 c
85.347435 80.599236 85.347435 74.900764 81.832703 71.386047 c
78.317986 67.871315 72.619514 67.871315 69.104797 71.386047 c
65.590065 74.900764 65.590065 80.599236 69.104797 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
688.1048 784.88605 m
691.61951 781.37134 697.31799 781.37134 700.8327 784.88605 c
704.34741 788.40076 704.34741 794.09924 700.8327 797.61395 c
697.31799 801.12866 691.61951 801.12866 688.1048 797.61395 c
684.59009 794.09924 684.59009 788.40076 688.1048 784.88605 c
S
0 i
1 1 1 sc
CM
186.1048 84.113953 m
189.61951 87.628685 195.31799 87.628685 198.8327 84.113953 c
202.34744 80.599236 202.34744 74.900764 198.8327 71.386047 c
195.31799 67.871315 189.61951 67.871315 186.1048 71.386047 c
182.59006 74.900764 182.59006 80.599236 186.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
805.1048 784.88605 m
808.61951 781.37134 814.31799 781.37134 817.8327 784.88605 c
821.34741 788.40076 821.34741 794.09924 817.8327 797.61395 c
814.31799 801.12866 808.61951 801.12866 805.1048 797.61395 c
801.59009 794.09924 801.59009 788.40076 805.1048 784.88605 c
S
684.96875 791.25 m
668.86877 791.25 l
S
0 J
0 j
0 i
660.86877 791.25 m
668.86877 791.25 l
668.86877 794.25 m
660.86877 791.25 l
668.86877 788.25 l
S
1 J
1 j
0.60000002 i
738.96875 791.25 m
713.86877 791.25 l
S
0 J
0 j
0 i
705.86877 791.25 m
713.86877 791.25 l
713.86877 794.25 m
705.86877 791.25 l
713.86877 788.25 l
S
1 J
1 j
0.60000002 i
801.96875 791.25 m
767.86877 791.25 l
S
0 J
0 j
0 i
759.86877 791.25 m
767.86877 791.25 l
767.86877 794.25 m
759.86877 791.25 l
767.86877 788.25 l
S
1 J
1 j
0.60000002 i
837.96875 791.25 m
830.86877 791.25 l
S
0 J
0 j
0 i
822.86877 791.25 m
830.86877 791.25 l
830.86877 794.25 m
822.86877 791.25 l
830.86877 788.25 l
S
1 J
1 j
0.60000002 i
909.96875 791.25 m
866.86877 791.25 l
S
0 J
0 j
0 i
858.86877 791.25 m
866.86877 791.25 l
866.86877 794.25 m
858.86877 791.25 l
866.86877 788.25 l
S
1 J
1 j
0.60000002 i
963.96875 791.25 m
938.86877 791.25 l
S
0 J
0 j
0 i
930.86877 791.25 m
938.86877 791.25 l
938.86877 794.25 m
930.86877 791.25 l
938.86877 788.25 l
S
1 1 1 sc
1 0 0 -1 30.53125 55 cm
/F1.1[ 7 0 0 -7 0 0]sf
-13.694092 2.5 m
(!"#$%&')[ 3.940918 3.940918 3.940918 3.944336 3.978516 3.701660 0.000000 ] xS
1 0 0 -1 76.46875 55 cm
-13.555664 2.5 m
($&#!'!&)[ 3.944336 3.701660 3.940918 3.940918 3.940918 3.940918 0.000000 ] xS
1 0 0 -1 130.46875 55 cm
-13.533447 2.5 m
('&!\("\)%)[ 3.940918 3.701660 3.940918 3.715332 3.940918 3.848633 0.000000 ] xS
1 0 0 -1 193.46875 55 cm
-12.914795 2.5 m
(*+&,#$$)[ 3.940918 3.940918 3.701660 2.416504 3.940918 3.944336 0.000000 ] xS
1 0 0 -1 228.46875 55 cm
-14.676758 2.5 m
(-,\)\)#"&\()[ 3.940918 2.416504 3.848633 3.848633 3.940918 3.940918 3.701660 0.000000 ] xS
1 0 0 -1 300.46875 55 cm
-12.760986 2.5 m
(\)\($#'\(,)[ 3.848633 3.715332 3.944336 3.940918 3.940918 3.715332 0.000000 ] xS
1 0 0 -1 354.46875 55 cm
-12.711426 2.5 m
(",\(\)&'#)[ 3.940918 2.334473 3.715332 3.848633 3.701660 3.940918 0.000000 ] xS
1 J
1 j
0.60000002 i
1 0 0 -1 -619 869 cm
630 837 m
982.84998 837 l
S
0 J
0 j
0 i
990.84998 837 m
982.84998 837 l
982.84998 834 m
990.84998 837 l
982.84998 840 l
S
1 0 0 -1 192.375 19 cm
-7.8425293 2.5 m
(./0&)[ 4.101562 1.763672 6.118164 0.000000 ] xS
1 0 0 -1 354.375 109 cm
-9.1140137 2.5 m
(1234)[ 4.993652 4.091309 4.532227 0.000000 ] xS
1 0 0 -1 300.375 109 cm
-13.46167 2.5 m
(12345')[ 4.993652 4.091309 4.532227 4.610840 4.754395 0.000000 ] xS
1 0 0 -1 300.375 127 cm
-10.576904 2.5 m
(12346)[ 4.993652 4.091309 4.532227 4.610840 0.000000 ] xS
1 0 0 -1 228.375 109 cm
-16.144775 2.5 m
(",\(\)&'#6!)[ 3.940918 2.334473 3.715332 3.848633 3.701660 3.940918 3.940918 2.925781 0.000000 ] xS
1 0 0 -1 129.375 109 cm
-14.377686 2.5 m
(*+&,#$$6)[ 3.940918 3.940918 3.701660 2.416504 3.940918 3.944336 3.944336 0.000000 ] xS
ep
end
%%Trailer
%%EOF
