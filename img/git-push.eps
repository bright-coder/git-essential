%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 418.000000 436.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 418 436
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 418 436
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /r put
dup 36 /v put
dup 37 /C put
dup 38 /o put
dup 39 /m put
dup 40 /p put
dup 41 /u put
dup 42 /t put
dup 43 /A put
dup 44 /P put
dup 45 /j put
dup 46 /c put
dup 47 /space put
dup 48 /quoteright put
dup 49 /B put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70002FFFA0000029002CA0003000B002500B800042FB800052FB800092FBA0000000700032BB8000010BA00020005000411123930311B0133130301333721173301C9790277ABFEEA6150012E4E69FEE90127014DFEB301A3FD36D7D702CA00000003004E0000028002CA000A0021002C0101BA0001000B00032BB8000110BA0019000700032BB8001910410500DA000700EA000700025D411B0009000700190007002900070039000700490007005900070069000700790007008900070099000700A9000700B9000700C90007000D5DBA002900070019111239B800292F410500DA002900EA002900025D411B0009002900190029002900290039002900490029005900290069002900790029008900290099002900A9002900B9002900C90029000D5DB80012DCBA0016000B0012111239B8000110B80022D0B8001210B8002EDC00BA0022000C00032BB8002210BA000B000100032BB8000B10BA0000002300032BB8000010BA0016002300001112393031133533321E0215140623011121323E0235342627353E01353426272E0323033533321E0215140623ADBE1F372A184751FEE301593551371C464233373123102D343517A4D91E382B1A473F0197E307182C2639390133FD3623394A27425C0E02145339364A150A0A0501FD86F70B1B2E233C4400000001002BFFF002AA02DB0025006DBA001E000B00032BB8001E10411B0006001E0016001E0026001E0036001E0046001E0056001E0066001E0076001E0086001E0096001E00A6001E00B6001E00C6001E000D5D410500D5001E00E5001E00025D00BA0019001000032BB8001910BA0006002300032BB8000610303101332E0323220E0215141E0233323637230E0323222E0235343E0233321602445F08344E6438527F552C29527C53899E0E



00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/B 3 def
/C 4 def
/P 5 def
/S 6 def
/c 7 def
/e 8 def
/j 9 def
/m 10 def
/o 11 def
/p 12 def
/r 13 def
/t 14 def
/u 15 def
/v 16 def
/quoteright 17 def
/uni2B91 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE11357769C8B8208A441E0F79686FD703A92173AFE0140C45DDCAE637EE7869B4139840004276DC12B30CBD85555D0D790F863E8349FA37B94FB0DF0B1F70D6067B0FE49326231AA87E271F2C161BC0C5CE008704552CE199E8D2347A2847DCAD75307B6930C8661A075707749D2678EC8070067DA04442D0741FC4904A40A49BF9271E5D709B1BCEF2E3A41FE56CF08934A240D7C29581C17354F913200DF613A8308DE8863A2D1A8A22EEAC44CA1DAB0D366358753A5A5A568A844E04EC4143C0287F3EA86128560387897EF67AE583061BA5A6375D07B2A6A657F7AB3A1DB23358C69764010361B9EB06D5C062F9BCB3787F28586CBAB0793E12767F766679C294C607F8D6A83E6DCA9EDAD1F8583B10BD9ADF15855790E81C0D8B4A2F9FD6F711A684CCFCB6B409886199E7E1625123E43194B28E7543E7399EACA23D28E1D2EE3D2F476C9B303115F2CA6333CDF53729ED55AE36AAAA7843C3AAA32D11C10DDE978F1546FFE9A3DCDE808A3F9C921EED5566DC1C3A9A8B6F459C5889770E36337ECD325049827582B22AAF799C7D2A748B8B1F73D7C838DA578EF505032F3A26B871ABC4DB5B5A4A7CB9A39DCC882E65264EF6B7074367545BBE255D6327383A0A1EB382E023BB565ECEFA141BE8255012B56AA6F7AFF1BA30B04ACF362560A8CF11B0ADFA71A27D6B433879D804B7894DE3BC1F6B2387FC72A6F7B3CB1C65705F5BD
B1A7148E321226211BD5D7589D18C20EA2B1E5FCE4AEF3A873E17FF4406F121E82378E7BAE9841FF7A25BDEA83CB5053656C2993372E53ACD2A968BEA1A7C48208AD2A493B1499D34E1D855CB9D5571752274FD67148C6A73F2CA3B0AB14120BD48E82F7BC5D49C9F9493E7CE3745F8187BDF7938CEECD3CD39FD0B41CE4E67C343FBE4AC40E82A9BFF0BA5036F1FDA2BE2489F8781CA487EB3545945090D9C3B9E460554DA76C20D465E5908513AA31023929254FC4A5AD01671934E323E984E5B06412F7006D045EA01433036ABAC56982D34B5C63F885449BCAFDF8318A872C31B9DE03B5E0866022199B55DD009ABB348009F7CD515826F597525FD3FB2EDA1244AB04EAAD2899D3E002AEBB5967AF3CD122C72BB47E7A0634851D07AC96A703B2D53A1E0EBADEC3C22F394CD77E6A24A1B4376489A931185BCD4133BD11AD07655028FAFF7E9627250E2CF376AE0F84E5C83C903434FC37119299F1B741269CE070125F3D9F859F10DE9316407E6993F959C0A873C461A4CBDECD03F293914EA9B1713702015832ECE3B7AECEE9D7D33BBDDB43896150C2DDE54265E1E0686D5DCDD6281C560AEC31010852CD2C25DAFD21E4D693CD70ECBA0585AF01E59F98FFC5C9CBF11EC5BB041D38627710E2C2D3AEE26245499C773A98BEB115BBC03A9BA309F7D82146117AF22BCBB37CBC8A789B3BF810E3F38DE24810782B0E826536609F015C5DDDFA176F6B407DC668F893BD723FDE890744E6AB9D6F0039FCCC4B2538B019AB72A4B9B3DFC32A00623B2406CCB89E7626A9753D498EB36719376DCEA3D015B7D986A61B4CDEA767CE6EC8CAA18AF4E107D7285F73148E68654FF8118E96B715236B00E201B7E65AD9C4AFFB2DE98361C85A53641E90BCD1BC97DD426CA596E9109C37DDD01503905145977C45F0B05A485DBF63BF0378250DF317747A1A0E94D934504FDCB8D7E475617A0A78965AF1B8D70527D22DBB07E5233A28356C876F737CAD65E5E680039C1717351FF22C2FFBA22D5EE4C09DA7E3249DFFA240958037ADE8ADF8A25CE75135F5604F643711A3D645364518F63D616846D306EE329C5F3D64C860851855B8845705FEB7F898D3C8EB0E2BA76927EA426D527F7AA99023C4ABDE6B95B7B8C229FFBD0A1731B0DE745CF1CCDD812C89C5BD95181A011B1014E8D57F38E457A2CA59D1094DB751F76F75FED95D4CFD07BD381DBCB5B69120C5DB0A82EBFF4ADB5DC0AD206A72FE6DD478FB46641C0E7E6A67302F3FEDDB19B6AF9FC4E407628A1E3E8E0E344505E64EAF6966FCEAB362F55C79A89CD1D313D39E09C210465B343BEA9743EB4BAA0AED414CC2EB041610810DE78C67BEF663CB64B64338FFDE39DF21067A217D8341A2020445D97CE0638471B788DAEEC9AB41DB2271F9689AED90C9151B7A1AFF156DF68324FCE9B0
B2F802879AE3F5B7F411E49B1EE39B783C0C54173FA725BAB56FE9F9154394D650D359F582A81B2AB3279636A79A3AE7AF37ECDE73EDDC3929B202F15847F626DC5DAF5BB08C021E7C57E88392B5856416423801D5CD2A5E9CF7CDAFD936AC2680CCDA4E9BE942C7A83749819771241C6C9BA5756B9F53FC614E1EEEF7434EED39B7A42E1245B585348ED1998B080AA861B3FB3110D91F1E17BA858CB6F12BC5F2BFF85CD0F84ABE5D089D13AF0579F23800327018A239BE9039C3BB1A8AA4379FFF9FBE97E5A4A15A7C551F8FFBE15D126FA28E285EFB07E53004EE7F803113B6C35D04354BF92BC66634A7A03C914B93FA9FD504066912B07888B5B0A57AB605C731BDCA4F1CA3FB2493EA4DF6AC7157B0638809721313BF2DB2FB833DD9B05B8D28BA1CB2E631BA034879AC7A8D7C9EF81D168180F7F02CB7159215F94065318092929B51F5A9034CB4199EA4D7947BE0439A4D336443206F6399A6BA7BB082C5EF385EC10C8752F4BA373E3C8D4B5D4FC9E3D19FB2AEE054885AEBC5B0AD525613D1FAB2214E519D0EE25A876FEA067AD14DA47C73AD1E9E52FE4A1E01E1E8F1B717C08B2D3C3900FA486A9760AFEB6E712C55EC8BB2EB6BBA204B92EADF57FEB35901BECA158A3C57A7D7C9E4F8CC8898EDB842D382644085D0EFB0340E023E20D969D5BA3BD4056CD8D15DFD6FD1DCA520661F2A76B3FC45029FB5F3FDFDE223A060A32B1CDD72533CF868DCF029B786E1398D425511260C4F5B7471B1C82D74A00F6BCAEF921C72AA2888E6CDE6A73B409E3B149F6601C451312340751600ABEA34034032CF13D9AAE003DE31F01EAE4DB227D3965687BB44ABA49C291E550B9F6DAD6569C935EC072F4F528E77E02F4668469E6288FF8B7C57FA815AF2F5B9050F298F034A4E6A4DAF7CD31751730E273ECEB85E1A552D7803BC56975A36C96B59D2BF3B961BF4FD30BD6E93A61A33608F258EDD1668D774320B685B6F7A4D0655688D79E031FC5F070EF123AF728F5AADBC3285DFC3CD19C16E0E01E22D182BFF25CE3F07D358FBE840174A4AC06223E74653D24D657F2BE0CB7ACFC1C6E9F7C8DD19AE70905B760E8A5190ABEE6BBDE9B83886570ADC81A9B3A66459C4DC7DD768DA87D446821CE5BE4D95C87C765903FE24097651F2BDE8ED0E49BC2FFE6A6CC96432A7020A6B49CF77AB5D2ECC11DFDD5A62F5C333D276D37B80808F94BDA492DD103CA4BC571F245965D3ACDB4504F66B9C6F87C30B90514AA9C9DE0A73B8912DDEE1D4A204A0CF33AD3EA7A17E92C6878808D9D572CD500F234C2A8512C9C850A849E317CB19523DE88875B7B37250DBEE1222C5F0474BC34E85F3B80648081A0BC880C5B1765096FD210F1B9CD1BCA33A794A76E5786AB363816F886D7947539C24EEBCAD4147BEA84F9704EDC7EBE64D2FC3DC9BE6DAF85C

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 418 436 rc
-745 1496 m
839 1496 l
839 -61 l
-745 -61 l
h
-745 1496 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
890.20721 1126.4608 m
809.34991 1142.7047 801.33771 1253.364 810 1314 c
S
0 i
CM
153.12077 370.71967 m
144.7657 372.5065 l
145.65094 366.57217 l
h
153.12077 370.71967 m
f
0 J
0 j
1 0 0 -1 -745 1496 cm
898.12079 1125.2803 m
889.76569 1123.4935 l
890.65094 1129.4279 l
h
898.12079 1125.2803 m
S
1 J
1 j
0.60000002 i
1017.7619 1126.6326 m
1089.735 1142.9445 1098 1245.0023 1098 1314 c
S
0 i
CM
264.87399 370.68661 m
272.26959 366.40814 l
273.25925 372.32596 l
h
264.87399 370.68661 m
f
0 J
0 j
1 0 0 -1 -745 1496 cm
1009.874 1125.3134 m
1017.2696 1129.5918 l
1018.2593 1123.6741 l
h
1009.874 1125.3134 m
S
1 J
1 j
0.60000002 i
950.86584 1252.4025 m
950.95154 1374.292 952.63794 1313.5168 952.63794 1313.5168 c
S
0 i
CM
205.86314 251.60016 m
202.86588 243.59914 l
208.86588 243.60118 l
h
205.86314 251.60016 m
f
0 J
0 j
1 0 0 -1 -745 1496 cm
950.86316 1244.3999 m
947.86584 1252.4009 l
953.86584 1252.3988 l
h
950.86316 1244.3999 m
S
1 J
1 j
[
20
5
4
5
4
5
] 0 d
0.60000002 i
756 1278 m
1152 1278 l
S
0 i
1 1 1 sc
CM
247.18373 409.18372 m
268.27213 388.09543 268.27213 353.90457 247.18373 332.81628 c
226.09543 311.72787 191.90457 311.72787 170.81627 332.81628 c
149.72787 353.90457 149.72787 388.09543 170.81627 409.18372 c
191.90457 430.27213 226.09543 430.27213 247.18373 409.18372 c
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
992.18372 1086.8163 m
1013.2722 1107.9045 1013.2722 1142.0955 992.18372 1163.1837 c
971.0954 1184.2721 936.9046 1184.2721 915.81628 1163.1837 c
894.72784 1142.0955 894.72784 1107.9045 915.81628 1086.8163 c
936.9046 1065.7279 971.0954 1065.7279 992.18372 1086.8163 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 371 cm
/F1.1[ 16 0 0 -16 0 0]sf
-23.104 5.776001 m
(!"#$"#)[ 10.368000 8.592000 5.328000 8.000000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
103.18372 166.18373 m
124.27213 145.09543 124.27213 110.90457 103.18372 89.816277 c
82.095428 68.727875 47.904572 68.727875 26.816277 89.816277 c
5.7278719 110.90457 5.7278719 145.09543 26.816277 166.18373 c
47.904572 187.27213 82.095428 187.27213 103.18372 166.18373 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
848.18372 1329.8163 m
869.27216 1350.9045 869.27216 1385.0955 848.18372 1406.1837 c
827.0954 1427.2721 792.9046 1427.2721 771.81628 1406.1837 c
750.72784 1385.0955 750.72784 1350.9045 771.81628 1329.8163 c
792.9046 1308.7279 827.0954 1308.7279 848.18372 1329.8163 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 65 128 cm
-35.863998 -3.447998 m
(%&'\(\)*"#)[ 11.552000 9.184000 13.648000 9.488000 8.896000 5.040000 8.592000 0.000000 ] xS
-5.184 15 m
(+)s
/Cs1 SC
1 1 1 sc
CM
29.719999 92 m
100.28 92 l
108.62624 92 115.4 83.935997 115.4 74 c
115.4 64.064003 108.62624 56 100.28 56 c
29.719999 56 l
21.37376 56 14.6 64.064003 14.6 74 c
14.6 83.935997 21.37376 92 29.719999 92 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
774.71997 1404 m
845.28003 1404 l
853.62622 1404 860.40002 1412.064 860.40002 1422 c
860.40002 1431.936 853.62622 1440 845.28003 1440 c
774.71997 1440 l
766.37378 1440 759.59998 1431.936 759.59998 1422 c
759.59998 1412.064 766.37378 1404 774.71997 1404 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 65 74 cm
-34.223999 5.776001 m
(,#&-".*/+0)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
391.18372 166.18373 m
412.27213 145.09543 412.27213 110.90457 391.18372 89.816277 c
370.09543 68.727875 335.90457 68.727875 314.81628 89.816277 c
293.72787 110.90457 293.72787 145.09543 314.81628 166.18373 c
335.90457 187.27213 370.09543 187.27213 391.18372 166.18373 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
1136.1837 1329.8163 m
1157.2721 1350.9045 1157.2721 1385.0955 1136.1837 1406.1837 c
1115.0955 1427.2721 1080.9045 1427.2721 1059.8163 1406.1837 c
1038.7279 1385.0955 1038.7279 1350.9045 1059.8163 1329.8163 c
1080.9045 1308.7279 1115.0955 1308.7279 1136.1837 1329.8163 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 353 128 cm
-35.863998 -3.447998 m
(%&'\(\)*"#)[ 11.552000 9.184000 13.648000 9.488000 8.896000 5.040000 8.592000 0.000000 ] xS
-5.776 15 m
(%)s
/Cs1 SC
1 1 1 sc
CM
317.72 92 m
388.28 92 l
396.62625 92 403.39999 83.935997 403.39999 74 c
403.39999 64.064003 396.62625 56 388.28 56 c
317.72 56 l
309.37375 56 302.60001 64.064003 302.60001 74 c
302.60001 83.935997 309.37375 92 317.72 92 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
1062.72 1404 m
1133.28 1404 l
1141.6262 1404 1148.4 1412.064 1148.4 1422 c
1148.4 1431.936 1141.6262 1440 1133.28 1440 c
1062.72 1440 l
1054.3738 1440 1047.6 1431.936 1047.6 1422 c
1047.6 1412.064 1054.3738 1404 1062.72 1404 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 353 74 cm
-35.112 5.776001 m
(,#&-".*/10)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 10.960000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
247.18373 166.18373 m
268.27213 145.09543 268.27213 110.90457 247.18373 89.816277 c
226.09543 68.727875 191.90457 68.727875 170.81627 89.816277 c
149.72787 110.90457 149.72787 145.09543 170.81627 166.18373 c
191.90457 187.27213 226.09543 187.27213 247.18373 166.18373 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
992.18372 1329.8163 m
1013.2722 1350.9045 1013.2722 1385.0955 992.18372 1406.1837 c
971.0954 1427.2721 936.9046 1427.2721 915.81628 1406.1837 c
894.72784 1385.0955 894.72784 1350.9045 915.81628 1329.8163 c
936.9046 1308.7279 971.0954 1308.7279 992.18372 1329.8163 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 128 cm
-35.863998 -3.447998 m
(%&'\(\)*"#)[ 11.552000 9.184000 13.648000 9.488000 8.896000 5.040000 8.592000 0.000000 ] xS
-5.48 15 m
(1)s
/Cs1 SC
1 1 1 sc
CM
173.72 92 m
244.28 92 l
252.62624 92 259.39999 83.935997 259.39999 74 c
259.39999 64.064003 252.62624 56 244.28 56 c
173.72 56 l
165.37376 56 158.60001 64.064003 158.60001 74 c
158.60001 83.935997 165.37376 92 173.72 92 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
918.71997 1404 m
989.28003 1404 l
997.62622 1404 1004.4 1412.064 1004.4 1422 c
1004.4 1431.936 997.62622 1440 989.28003 1440 c
918.71997 1440 l
910.37378 1440 903.59998 1431.936 903.59998 1422 c
903.59998 1412.064 910.37378 1404 918.71997 1404 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 74 cm
-34.223999 5.776001 m
(,#&-".*/+0)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
174.62 47 m
245.17999 47 l
253.52625 47 260.29999 38.936001 260.29999 29 c
260.29999 19.063999 253.52625 11 245.17999 11 c
174.62 11 l
166.27376 11 159.5 19.063999 159.5 29 c
159.5 38.936001 166.27376 47 174.62 47 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
919.62 1449 m
990.17999 1449 l
998.52625 1449 1005.3 1457.064 1005.3 1467 c
1005.3 1476.936 998.52625 1485 990.17999 1485 c
919.62 1485 l
911.27374 1485 904.5 1476.936 904.5 1467 c
904.5 1457.064 911.27374 1449 919.62 1449 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209.89999 29 cm
-35.112 5.776001 m
(,#&-".*/10)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 10.960000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
169.22 335 m
239.78 335 l
248.12624 335 254.89999 326.936 254.89999 317 c
254.89999 307.064 248.12624 299 239.78 299 c
169.22 299 l
160.87376 299 154.10001 307.064 154.10001 317 c
154.10001 326.936 160.87376 335 169.22 335 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
914.21997 1161 m
984.78003 1161 l
993.12622 1161 999.90002 1169.064 999.90002 1179 c
999.90002 1188.936 993.12622 1197 984.78003 1197 c
914.21997 1197 l
905.87378 1197 899.09998 1188.936 899.09998 1179 c
899.09998 1169.064 905.87378 1161 914.21997 1161 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 204.5 317 cm
-32.591999 5.776001 m
(,#&-".*/+)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
170.12 290 m
240.67999 290 l
249.02625 290 255.8 281.936 255.8 272 c
255.8 262.064 249.02625 254 240.67999 254 c
170.12 254 l
161.77376 254 155 262.064 155 272 c
155 281.936 161.77376 290 170.12 290 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -745 1496 cm
915.12 1206 m
985.67999 1206 l
994.02625 1206 1000.8 1214.064 1000.8 1224 c
1000.8 1233.936 994.02625 1242 985.67999 1242 c
915.12 1242 l
906.77374 1242 900 1233.936 900 1224 c
900 1214.064 906.77374 1206 915.12 1206 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 205.39999 272 cm
-32.888 5.776001 m
(,#&-".*/1)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
