%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 373.000000 463.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 373 463
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 373 463
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Bold
%!FontType1-1.0: Roboto-Bold 1.0000.1.0000
14 dict begin/FontName /Roboto-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /b put
dup 34 /l put
dup 35 /o put
dup 36 /C put
dup 37 /m put
dup 38 /i put
dup 39 /t put
dup 40 /r put
dup 41 /e put
dup 42 /a put
dup 43 /n put
dup 44 /c put
dup 45 /h put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1035 1 index div -555 2 index div 2440 3 index div 2172 5 -1 roll div]cvx def
/sfnts [<




00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/C 1 def
/a 2 def
/b 3 def
/c 4 def
/e 5 def
/h 6 def
/i 7 def
/l 8 def
/m 9 def
/n 10 def
/o 11 def
/r 12 def
/t 13 def
/macron 14 def
/uni0423 15 def
/uni04EE 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1035 -555 2440 2172}def
/UniqueID 4052120 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934F32286AAEFCA092DB34C59F118964179DC81C28D43B6AD51122BB2350AA96F678C5AC635DFFA0E0C0AE5E18692597795674A6DC8E319DEDAA8F4A535057282BB47A9F7EFC33B1B17DA3168A866249CDA32C20CA8C3C86B77D89BA75B083B3A0E755D589942CFE8DBC3726F813F500F90A4B03CD10E8AE0750E383DFAE271189394032317FD39C4463744E19358FFDA8276CF5FB12ABDD2F809E46AE5F375BA47201B68C6D7A34D155480344FB8AE70DE81284F9AF031EED0F077B233637ED1E27774676133EF080BCCD7B3DB6282E8995631CB1355CD844B80300507BB2AD7143F24A4AB728862CDC953182F3B738191AC945CCEBB367A925995AD30F6613AC035E13318C4BBFF6AF8A712EBD5BF9F621C3D7359B18E8EE792828D0E1BC965B1A19F59BDF9111E1CE900E0C4D6D0ED86636C45F4A53C4E3F4B5AA91B5227D35E43BCE3D20E6288EE3385DAFD93795879B657A8B832FE1B666B930190C78C5AFB8B92042C3325485E9087EAE8D4AA741920C384EBAD118EBAAD11B62D679C3DA3B5DAAD53AFDB0CB1194809A18EC82C77A1B6F71B94EEC46C070C76ED14691EB6BFF9B01C5BA6C359313B33ADE20411C91A1BBFA5ACA155A12C83DD1253B8B485A332205FCECF074FF5FEFC60A94D7BA0309426B4ADBF37D5AE5B789F3C36BDBFA02F830C8728A76AD483CEE18960767E2B883E7DAB58DE64EA0983002F78C1D08306A5499BEF4901A755892D6B85D0A7DC2F17C6C4B90038FF0A4F0F05CB3295107B9A4A71AD5DABA004B85F8197190F9E74775
060B86C7D7176A6EAEF0E0BA56BBEF09B65E42008EB0208A8063311D43F3AA2D37BA3B924778634695555E52F7B7DB049336EE8B7811888E3484DFC6642434034F05C96A5D01580C8A0EE780FC87EC61057FF2DFA5E10B009E200634419DF16D9EAB44E5F408317F5A811B52736A318087516A554EF5BD167BD4298FFED08DCA13246694F192CD5AA8BA43AC77225F790CCEE03399A85AF7799E146DB0DA1F780F0803CCDCEEE210B1D3526004E5ACB4C25EAD94F8208EE4183195AF58BE7E10466DF85D8BA81739F256794193D8CC7C7A813CC70A7FDAE33B900B8CCE4AEE08A220F6A5C9B49EE6EF4C3F2D1F9BB8AC9B84438C5DBA2D6326095E9DBD55DA4F25D59FD85A92A80BFF75CBA5131C1E8A73664F3B5F456EA77D4B1D5828413D49B9BB7AC54574600870C36FBF0FE3DB968C75605F0B6FAF4A30868944E86CC1951680A89AD508716EF4DD740064471C3E419FA9814E2DCC334639A03B797700FAFE5F774C024B42506AD033C0B5A83F1B9A0C2FD0AA9E8457A01711C8E8F3BC7DA20F1881507BF7785A6D75C47043D4EE985F3353EC13DCF85BF025D03933F977039C277BE8F0B21DDDE406860247AE4A95D941A81A31B77F65D4ECB28AB3C26775CAF7EEBACFC4DFCD63BF167FD543527F82F3D577309DAE1E61E8C2BBA5603CCA0AEF27D464AB85DE8DFA23CF40C6357286F34D3BDC460F4E6648F1A9A9367FB840CE89B4CB52F63C7D356C58AEC4C079E41CA4400AB9A694F3643FB8F39072DD35F1C03EBDA95BF4BA6C4EAC7B50936289EFEC3C008372DEA26C8F192E2A5960F4A0C8D3FE7CFDC566E4039B290230EE6F7D53687E9DEAFB6AF7BEFBE32F17F9585C3B305EE5DDB7835BF3F8F313DA6C56F14E71EF17C51037BB85B9D8ECACF723BABB67B35193E0B63DDEF4D7631E931CB10EADA664215467D05A7D43E27614DAB9D197E339CEB55A999ADF6C88840D284EB4ABE88EED0349668DC8DDE31030382EA531792BD34322DA660A2C4990919411E4E2AF35CB74C99D71A8B574DA0148F869260F549B257E2207143732FD87E5E28535489071C556771129CE04EBF73D79656ABEEBD7CE4C6CBAC67CCFD0F29FC8885EC503B1AF1B82B13A28CF3A42D28A5283CC2128A29F819770DE0213DDD8FB06C987D5A901F9D5E73001C014505BE92FB02B1F764E0F1807CBCD0F5DDBFBDED0D625B595124BFD82DA89B3DF7F567DFC3E934BC0DDE38D77B05A1FAA788BC1408F993BF742A97A2E5872DDE5DD23E9DEF39EC31CEB6492C520E6316E515FBCFB8BF5AAFB8599572B1FCFD1E4ACAB5E6D2631EBAC0035139BF0B951CDDFF52905887972833E13B172A5A19CCFA77BAC110A29718D88104CEA92DDEF6B904C4BD81D2D837F07F2A44A67827540879A87DDE9542630A663F94E7AFA5618579C56DEA8563E94238F57802F386289
EBBFF70CE7F3F2F4579C903A1135C56B159C7FC5FEE218860636219F664CD53C3AE39C937226B7AA4FA2A2A3D82297425153B65F309282B08A9BF462C3FD8CE7A4750C50C28A7FFEE32B00D7D106E2C0D3657271D433B4E79BD349A0EF601E32321DEF5A807904CA518D2ED0AAC72A999B17A5D67059E38F2D4A24E16EF1CCC53964DF0CE8A3DDE53BA36ED3C3275796CE79F4D57A68117047583A627CC4B08BDE88B6BB6B73ABAD2F94FA005BA7F25084055013EA025F493034E90B736C4F52DC4AF5FA48DB5D867CBB57C81E233BF600A65DA96E405361D41A28E386BC836BC6CBCA35191024D9990CCBC44B446D997B0F6DB4E0AB86991A079FFBA1FA7AA0D4A47938998DFB0AAF5F2197074CC17B2829C3086CB250533F17BEDA8B125FB5573D6B553085115DA1927DD465536F3F7642462DF4FFB35A502BAD07821ADBB4BB547F8B29522C24C85D2544A986AEFD1B3B36405E10391750FE54259BFEBFFF715E51E8E0190E3F0B5CBE6DFA2CA5D2821650A4E15B789C939AD85FC340F6C41FF155D822E379E111E644F144B0C762ACE2E50AB9E547E7C4F5EBD18B10A251A67F629BB451D749DAC7FF0495FE4205F0237A3ADFB289ED69479461C7267A83A56A90F56651B5D4F58932A22AA68331EE88E5C731F52752091BF9C3A430A61C6FCB64C23811B6A99C34216433216EF1B9E6798FC79ED9AEE30C9E98D95A84C23B34BD028D31B6FF28BCA42F743A1ADA32F20D1623C4F794BCD86F8AC5C930DDE6F65AA74FB1EA0CA298BFCF2777A85800D978433E5887BFF6273537F28BF478DA57CAC7F56B1929CD05EF6B9352B3E07ACAD5EED140C23D7B2E060F83112A5D02DD99DF82C6D044C2D8370910579CBE1E278B80989D90540E41C6EC526710E7B9DA2C999BDA71586B5C82EC8DDAE50B64EB6417A7B00F4A6C5473F74ADC6D3BF315346BDB26208886423364C1E7FB377E88CEBAAE659AB8343485ECA6576B13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Bold cguidfix
/F1.1/Roboto-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 373 463 rc
-70 470 m
530 470 l
530 -61 l
-70 -61 l
h
-70 470 m
f
282.09186 255.09186 m
292.63608 244.54771 292.63608 227.45229 282.09186 216.90814 c
271.5477 206.36394 254.45229 206.36394 243.90814 216.90814 c
233.36394 227.45229 233.36394 244.54771 243.90814 255.09186 c
254.45229 265.63608 271.5477 265.63608 282.09186 255.09186 c
f
2 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
352.09186 214.90814 m
362.63608 225.45229 362.63608 242.54771 352.09186 253.09186 c
341.5477 263.63608 324.4523 263.63608 313.90814 253.09186 c
303.36392 242.54771 303.36392 225.45229 313.90814 214.90814 c
324.4523 204.36394 341.5477 204.36394 352.09186 214.90814 c
S
0 i
1 1 1 sc
CM
282.09186 165.09186 m
292.63608 154.54771 292.63608 137.45229 282.09186 126.90813 c
271.5477 116.36394 254.45229 116.36394 243.90814 126.90813 c
233.36394 137.45229 233.36394 154.54771 243.90814 165.09186 c
254.45229 175.63606 271.5477 175.63606 282.09186 165.09186 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
352.09186 304.90814 m
362.63608 315.4523 362.63608 332.5477 352.09186 343.09186 c
341.5477 353.63608 324.4523 353.63608 313.90814 343.09186 c
303.36392 332.5477 303.36392 315.4523 313.90814 304.90814 c
324.4523 294.36392 341.5477 294.36392 352.09186 304.90814 c
S
0 i
1 1 1 sc
CM
132.5 56 m
240.5 56 l
252.92641 56 263 45.926407 263 33.5 c
263 33.5 l
263 21.073593 252.92641 11 240.5 11 c
132.5 11 l
120.07359 11 110 21.073593 110 33.5 c
110 33.5 l
110 45.926407 120.07359 56 132.5 56 c
h
132.5 56 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
202.5 414 m
310.5 414 l
322.92642 414 333 424.07358 333 436.5 c
333 436.5 l
333 448.92642 322.92642 459 310.5 459 c
202.5 459 l
190.07359 459 180 448.92642 180 436.5 c
180 436.5 l
180 424.07358 190.07359 414 202.5 414 c
h
202.5 414 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186.5 33.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-15.683594 6.5 m
(!"#!)[ 9.031250 4.273438 9.031250 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -70 470 cm
295.58282 235.18712 m
310.31757 218.57059 l
314.76996 240.32828 l
h
295.58282 235.18712 m
S
0 i
0.64705884 0.64705884 0.64705884 sc
CM
132.5 236 m
240.5 236 l
252.92641 236 263 225.92641 263 213.5 c
263 213.5 l
263 201.07359 252.92641 191 240.5 191 c
132.5 191 l
120.07359 191 110 201.07359 110 213.5 c
110 213.5 l
110 225.92641 120.07359 236 132.5 236 c
h
132.5 236 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
202.5 234 m
310.5 234 l
322.92642 234 333 244.07359 333 256.5 c
333 256.5 l
333 268.92642 322.92642 279 310.5 279 c
202.5 279 l
190.07359 279 180 268.92642 180 256.5 c
180 256.5 l
180 244.07359 190.07359 234 202.5 234 c
h
202.5 234 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186.5 213.5 cm
-28.402344 6.5 m
($#%%&')[ 10.226562 9.031250 13.843750 13.843750 4.273438 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -70 470 cm
295.10892 325.9631 m
309.84363 309.34656 l
314.29602 331.10428 l
h
295.10892 325.9631 m
S
0 i
1 1 1 sc
CM
132.5 146 m
240.5 146 l
252.92641 146 263 135.92641 263 123.5 c
263 123.5 l
263 111.07359 252.92641 101 240.5 101 c
132.5 101 l
120.07359 101 110 111.07359 110 123.5 c
110 123.5 l
110 135.92641 120.07359 146 132.5 146 c
h
132.5 146 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
202.5 324 m
310.5 324 l
322.92642 324 333 334.07358 333 346.5 c
333 346.5 l
333 358.92642 322.92642 369 310.5 369 c
202.5 369 l
190.07359 369 180 358.92642 180 346.5 c
180 346.5 l
180 334.07358 190.07359 324 202.5 324 c
h
202.5 324 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186.5 123.5 cm
-14.0625 6.5 m
('\(\)\))[ 5.585938 5.601562 8.468750 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -70 470 cm
256.5 369 m
256.5 413 l
S
0 J
0 j
0 i
256.5 413 m
256.5 401 l
251.7 413 m
256.5 401 l
261.29999 413 l
S
1 J
1 j
0.60000002 i
256.5 279 m
256.5 311.10001 l
S
0 i
CM
186.5 149.3 m
190.10001 158.89999 l
182.89999 158.89999 l
h
186.5 149.3 m
f
0 J
0 j
1 0 0 -1 -70 470 cm
256.5 320.70001 m
260.10001 311.10001 l
252.89999 311.10001 l
h
256.5 320.70001 m
S
0.85490197 0.85490197 0.85490197 sc
CM
137 344 m
236 344 l
236 317 l
137 317 l
h
137 344 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
207 126 m
306 126 l
306 153 l
207 153 l
h
207 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186.5 330.5 cm
-24.785156 6.5 m
(!\(*+,-)[ 9.031250 5.601562 8.593750 9.031250 8.281250 0.000000 ] xS
/Cs1 SC
0.85490197 0.85490197 0.85490197 sc
CM
11 344 m
110 344 l
110 317 l
11 317 l
h
11 344 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
81 126 m
180 126 l
180 153 l
81 153 l
h
81 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 60.5 330.5 cm
-24.785156 6.5 m
(!\(*+,-)[ 9.031250 5.601562 8.593750 9.031250 8.281250 0.000000 ] xS
/Cs1 SC
0.85490197 0.85490197 0.85490197 sc
CM
263 344 m
362 344 l
362 317 l
263 317 l
h
263 344 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
333 126 m
432 126 l
432 153 l
333 153 l
h
333 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 312.5 330.5 cm
-24.785156 6.5 m
(!\(*+,-)[ 9.031250 5.601562 8.593750 9.031250 8.281250 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -70 470 cm
145.03847 153 m
222.81619 225.22218 l
S
0 i
CM
159.85101 238.24548 m
155.26582 247.41588 l
150.36658 242.13976 l
h
159.85101 238.24548 m
f
0 J
0 j
1 0 0 -1 -70 470 cm
229.85101 231.75452 m
225.26582 222.58412 l
220.36658 227.86024 l
h
229.85101 231.75452 m
S
1 J
1 j
0.60000002 i
367.96155 153 m
290.18381 225.22218 l
S
0 i
CM
213.14899 238.24548 m
222.63342 242.13976 l
217.73418 247.41588 l
h
213.14899 238.24548 m
f
0 J
0 j
1 0 0 -1 -70 470 cm
283.14899 231.75452 m
292.63342 227.86024 l
287.73419 222.58412 l
h
283.14899 231.75452 m
S
1 J
1 j
0.60000002 i
256.5 153 m
256.5 221.10001 l
S
0 i
CM
186.5 239.3 m
190.10001 248.89999 l
182.89999 248.89999 l
h
186.5 239.3 m
f
0 J
0 j
1 0 0 -1 -70 470 cm
256.5 230.7 m
260.10001 221.10001 l
252.89999 221.10001 l
h
256.5 230.7 m
S
0.85490197 0.85490197 0.85490197 sc
CM
137 452 m
236 452 l
236 425 l
137 425 l
h
137 452 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -70 470 cm
207 18 m
306 18 l
306 45 l
207 45 l
h
207 18 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186.5 438.5 cm
-24.785156 6.5 m
(!\(*+,-)[ 9.031250 5.601562 8.593750 9.031250 8.281250 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -70 470 cm
256.5 45 m
256.5 113.1 l
S
0 i
CM
186.5 347.29999 m
190.10001 356.89999 l
182.89999 356.89999 l
h
186.5 347.29999 m
f
0 J
0 j
1 0 0 -1 -70 470 cm
256.5 122.7 m
260.10001 113.1 l
252.89999 113.1 l
h
256.5 122.7 m
S
ep
end
%%Trailer
%%EOF
