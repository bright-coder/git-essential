%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 539.000000 428.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 539 428
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 539 428
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /X put
dup 34 /U put
dup 35 /n put
dup 36 /t put
dup 37 /r put
dup 38 /a put
dup 39 /c put
dup 40 /k put
dup 41 /e put
dup 42 /d put
dup 43 /m put
dup 44 /o put
dup 45 /i put
dup 46 /fi put
dup 47 /M put
dup 48 /one put
dup 49 /S put
dup 50 /g put
dup 51 /A put
dup 52 /space put
dup 53 /h put
dup 54 /l put
dup 55 /E put
dup 56 /R put
dup 57 /v put
dup 58 /C put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 28 dict dup begin
/.notdef 0 def
/space 1 def
/one 2 def
/A 3 def
/C 4 def
/E 5 def
/M 6 def
/R 7 def
/S 8 def
/U 9 def
/X 10 def
/a 11 def
/c 12 def
/d 13 def
/e 14 def
/g 15 def
/h 16 def
/i 17 def
/k 18 def
/l 19 def
/m 20 def
/n 21 def
/o 22 def
/r 23 def
/t 24 def
/v 25 def
/fi 26 def
/uni2B91 27 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec

D983B8A3567F82EEBBDE62CC8281A10D0E2C61887600B11F3102AC93FDB94448302792DC25AA5FC40647E521E0ECAFE5F93F08B888298E15DD48296370AAF47D995A6D9D17F30AE1993C4BE7ADCBCB5F5E4A6A48E509CADAA6595FD21D4FDBE295D8CCAD3C84712838DA0B086FC99B7B10AF90E5ACD75378EAFEF2CD0E1BAEC8DBF1F56F6714C4CC7C91B2D700812697E4873CDE3FB5E45D3F50EC3BA424A17A4B2EC9C0482C46C62F7917F0514AE92054994751CA4BABFD709DEB182000169146FFC74ABE13272E5416911A9B6C67E5AB6D40B2298931A19593C351CF0703C079D7C9A5E072EFD21796DF79CB9B2E6608E5495542F5C0ED16F107ECBABA47D0F2165E013D15EAF03A08166F9B2F5CAB591F9D474B758201B92AF5D4A6B8E4E06BAD9AACA9D55B6E0D780EC2EA65667B70B13769E9466B3153D9675160ABC1981236B2AF8AB278018D0B9EECE2D40DEB68AD16C9EF7FADA6B80B15A2B06B7A3DF4ADB7F54C9880A389AD291C20D66832C606D50C25990FD216828399DA5D8DD95428C316184F734ADF50A611E42F1D742D8C52CEBFCF89F60D0E97ACD15CCB906521B676C3EBC59368B08C902D3B223753F7D3F347CAEFCFABBDAA0DEB8222D91BD58BF9C34C10CCB86777A65FE50B18BD9975DFD071F3754CC2B6707B898612CFBCA8583EEB51C17492174C2E67BE4DF3B3356B68028D9A0C49F42CE784099DD787CF7832CD917770E5C9A9E40C58AE553B699BD9125804D5FD1BF2CD857373F28940ACF94771589F10F902159A3937AAF1E1912256F8DBB2133CCDD9D9160EA2844A69826F0DCE4045010FB5045F817BD3A62374BAD46A7B5C5009CA43292E95C0D4D1F3E4332286A278B075646204D8AEBEDF125CEB2457B96DF4302F8F6BFF6BBDBD34809E76A63E790C7F2C19E6925EDCEF21EE3EE42458D74CCD335759912D1C890BE9B1F8D63731D00CE3DE075DC263BBACC4AC8F55BA79483ED1510FC006FD7444087946B28A33CB3AB6F4AB9997C3B9DBEEB0CD955CF164B9116B27B1529688C9FFFB87FF80122B5CD69540585371BB876470038EBFBE2D30D067870FB5859E6DD19F97DE47A88CD59814E90AD0AB563831A655E18BC1F7061653252610B9C9058EA382B5FD371AF2EF0EEB02D69DD09A710D7669E0177B17C52B03FAFFE984CF22E6196CBCEF67AD87DBB1865AE1C0B444114FD9808237CD73B2C4065DB65CF9984CCDD44CD0D93427900CC3457D7D92996EBB6F489CFF37FAAE6ABC51FBD8DC0975FA93B49D8555B8ABC7226291F48183C244C940507851012AD3CFB881A9A95DDF98635F64EA3B094B1ACCD6FEDC9F8713B1CA7DBA5CEFC9E1B7310F47D788C2CCE80023505EC556E95440595E8241E73D90AC44E34454ABC2E4E791F6375BFA7583EFFDCD9B0AF311CA429470075DC6A39BB685B7FFF5D021C2

C2FEEE728B7821A247DBCE69AA58F7A192B737CCDF886D1A4C81401600DA0D756D69D498FDF07C676440C53B91B2BB331F6E21F2F6C5D3F7207F660CF541D345B778C06A9A16C11B0438D2C2D237C0866C38E24BBC94E1F549335C18722D8E82076AED6E6B51B67964C51C2FF0C69781EA007745F52D52ED43815E67C142873B365A42234D8A41D540A9172CE4510E34DD880B2AC5886589114576D0B756FB2DB5AA135D821F4CDEE1D85EC8E5710E02FB2AA282B0D3B27C3F06CDEC9875A382C3063CEA4DD29B2D08C5FD275074F610B5381BB6CC5DC45A3128521F5342312C6E6CC824DB1AF7D04429F4DAF7CD7BC937B221CBBC3387CD2DABE0C6A8590D28FA6CD4AEA5ED2B5E4ED2589A45714D4292312BA94D85F0C68A8887E6E15B6773E5F10A82F92E025A0849FE7E3581FE1E69F5B5187A65D441B62BDE3471A224C14BC9C49B3D75419BCA461709C259914BD04CF17D19764422499ACA70D1CA2C85A9BCB516EE285A14421688EF3E318EDED76C51AD85B190EE8ED0CD5DAB5CB08DD8E62CB3E02F7A04294EC60036D5E2E98821ED5CFAAFB952053C28274FF21E4C1B63EFA6BF2ECC52B5C3F63FEE894C7E853933599F7D5807C49F9B7C8918760983EDDFEDE87CB100772DFA0795C8DDFC4C8D917F6A1ACFABC4D4B38B85B5D26C613617CDF6701E1F5FF689416FE6CDA5F3678B1F77A5A8DC92484064CD6E90F4AAB442360F19D9F1685C04730E486530930D0293CF368AAA3B7B460C8D5EC2031538CD027EEFC8D773051BCA7DF32576C5FFB60515ED6B92EB97007C9B8FBDCFC8002D7A89D5CF92318A26DA95809E23861397BF8A5CC9979C3067FC90DB40044D4EBFB7DDD4AD13D6C5D98DECBC907CD57732F0B6D23FCE4A3046F0556F8B617101A35BF61A975473B820E4E59F1A1BFBE410E351CE2B8CA8BF2286E9CBF9A16721559668A0BE97B47FCC49DA4F63E315D14CBF24502742D5ACF3C5B8A3988168A7C9A241736ADF6C6153A2A3E412A97A3D1949446917F72A27761E72B2B46455D35A9CCAD6642586558B4779B137309EA57BC1F3BACAA2A7AABCA5AE66C077E39E633699F63BD413B04E717A658FDF6552BAD8A2233C82005A48F1D30F2C119A3E740B84516542A110587DE25C133B9E6E899E5741F113A43B1B19DBBABA869DAEBE07DB8F503EED5032D04312BE75A5BAC5276B2589C837EE255A0E85CB06AEF297806D64F468C76BED8927E24EC6A4366F44EB23DD55777B0CEDD8DBD835C3AE0CDE01573AD7072D238C564E96076F49285553A4EFC5851777A71FBFDF52E98E628D98212F20E5064A781B24911F2B5982AAA9BEB7F36919D58CCEBD96FE3F9EF90ECC676BE5DE1AB955DAD0098700CBF19C82A5385041BAF258E9E1EB128C65BC8A949155AD1C37677379FA8B0559AA69150E005276C19A51038727B492
AB1B8E4269A5B4E8FE13796C84A22B6A02E061ECCD62A97B818D2A6877E749D262F0897CBD335AF3B8EDDA1B6D90C759219DE667BA2149703B15A254F8C18F52D3A10093885A8CD3BC6C7BC82BCCD84A82FE3CE999E3E68453844E5575ABBE5DDE40424E18FA1CBEE7A732531EE19F27316A3255EED7D11A44BF096BE41024AADAAC3B4742CE157299E28F202F844647D38AC4C8BD608EC14B9BA1E6B4D8B3BEB29CF315DCFB30D47E4BE1015346174D9DA338606B950199C289056E3CCAE3AE4C2004F09D52F0B2DD58292DCBAA8F80FADFA8E658417728C68E466163C345F88B7EDA0181BE08341690728BA4FAD7FC3B1EC52C3CBD2092AC33206B3DEAD186C954BA474F4AA2F7391FB72EFF8771C33918BBBDCBBD73FD4A808BCC59BCC4EE3568DEA9557AB944B4A8A69B1BED99463F53E5CDE3EF2D3CEF8C86AB5C3D150825393A002FAE64AD6736788BB49B1D7F8AAB6E2535DF0D375E18A0AF1E810F036497BF062DDFA547153EE5E05D74B234AA1967094BCEBA4A8E6A633983A479660E733C96BF173CE51E25C45A2333DF767FB35262AF81A2EF2011737DBA8783DD09EA74736C33F8EECF66A41542E1EADC9EAA4129D0CB324E35135AF426233F1B6FB1019ADD20997D7ACCB2BB01663183796BD7BB4E60EEA49317AFD23FF55E3CC5AE998EE61188CC1D959E736792A86379C386FA5EE449A83FC0BDAF48E43AAACA902355FA8B18B7E8ECECA239023BD63DD79EA853193FC974B69D47B7DB812C7936A527277C7B715F6DE4D71539A34252C7810AB70237771E16390D3B414E9CD1CF34C2E081A7819F034A9D1135CE8DB87F4E36800F1C1F4D007A994126B4B6D37179AB4F702EE077EEF8BD6A96A1E54FD47D675D502A32F9D2178A1319F97BB364BAC81A79B77B425A7F36E7A23949E426405DD0C1288CE5ABECB58003C6DF7CC1BEDA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Deltagreek put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<

002A002A002A002A40292A292827262524232221201F1E1D1C1B1A191817161514131211100D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019236A4445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C456920B00943B0022660B00325B005254961B0805358B21940194523616844B21A401A4523606A44B209191A45652345604259B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2C764520B003254523616818236860442D2C7645B00325452361682318456860442D2C7645B0032545616823452361442D2C4569B014B0324B505821B0205961442DB8002B2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8002C2C2020456944B001602DB8002D2CB8002C2A212DB8002E2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8002F2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800302C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800312C2020456944B0016020



00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/Deltagreek 1 def
/u20B8 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F2.1/Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 539 428 rc
-81 1280 m
711 1280 l
711 -61 l
-81 -61 l
h
-81 1280 m
f
11.8125 389 m
98.4375 389 l
98.4375 326 l
11.8125 326 l
h
11.8125 389 m
f
1 J
1 j
[
1
5
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
92.8125 891 m
179.4375 891 l
179.4375 954 l
92.8125 954 l
h
101.475 891 m
101.475 954 l
170.77499 954 m
170.77499 891 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 55.125 357.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-4.888 5.776001 m
(!)s
1 0 0 -1 55.125 404 cm
-37.192001 5.776001 m
("#$%&'\(\)*)[ 11.552000 8.896000 5.040000 5.328000 8.592000 8.592000 8.304000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
155.9375 389 m
242.5625 389 l
242.5625 326 l
155.9375 326 l
h
155.9375 389 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
236.9375 891 m
323.5625 891 l
323.5625 954 l
236.9375 954 l
h
245.60001 891 m
245.60001 954 l
314.89999 954 m
314.89999 891 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 199.25 357.5 cm
-4.888 5.776001 m
(!)s
1 0 0 -1 199.25 404 cm
-41.344002 5.776001 m
("#+,*-.\)*)[ 11.552000 8.896000 13.648000 9.184000 9.488000 3.552000 8.288000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
300.0625 389 m
386.6875 389 l
386.6875 326 l
300.0625 326 l
h
300.0625 389 m
f
[
4
9
1
5
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
381.0625 891 m
467.6875 891 l
467.6875 954 l
381.0625 954 l
h
389.72501 891 m
389.72501 954 l
459.02499 954 m
459.02499 891 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 343.375 357.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-10.665343 5.5 m
(!)s
/F1.1[ 16 0 0 -16 0 0]sf
0.88934374 5.5 m
(!)s
1 0 0 -1 343.375 404 cm
-31.264 5.776001 m
(/,*-.\)*)[ 13.936000 9.184000 9.488000 3.552000 8.288000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
441 389 m
527.625 389 l
527.625 326 l
441 326 l
h
441 389 m
f
[
20
5
4
5
4
5
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
522 891 m
608.625 891 l
608.625 954 l
522 954 l
h
530.66248 891 m
530.66248 954 l
599.96252 954 m
599.96252 891 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 484.3125 357.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-13.445344 4.3600006 m
(!)s
/F1.1[ 16 0 0 -16 0 0]sf
-1.8906562 4.3600006 m
(!)s
/F1.1[ 10 0 0 -10 0 0]sf
7.8853436 8.3600006 m
(0)s
1 0 0 -1 484 404 cm
/F1.1[ 16 0 0 -16 0 0]sf
-25.632 5.776001 m
(1$&2\)*)[ 10.368000 5.040000 8.592000 9.184000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
55.125 11 m
55.125 299 l
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
136.125 1269 m
136.125 981 l
S
0 i
1 1 1 sc
CM
199.25 11 m
199.25 299 l
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
280.25 1269 m
280.25 981 l
S
0 i
1 1 1 sc
CM
343.375 11 m
343.375 299 l
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
424.375 1269 m
424.375 981 l
S
0 i
1 1 1 sc
CM
487.5 11 m
487.5 299 l
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
568.5 1269 m
568.5 981 l
S
0 i
1 1 1 sc
CM
64.3125 257 m
64.3125 269 l
64.3125 270.65686 65.655647 272 67.3125 272 c
438 272 l
439.65686 272 441 273.34314 441 275 c
441 284.1261 l
441 285.78296 442.34314 287.1261 444 287.1261 c
444.63156 287.1261 445.24704 286.92676 445.7587 286.55652 c
474.9538 265.43042 l
476.29608 264.45914 476.5968 262.58359 475.62552 261.2413 c
475.43869 260.98312 475.21194 260.75638 474.9538 260.56958 c
445.7587 239.44348 l
444.41641 238.47218 442.54086 238.77292 441.56958 240.1152 c
441.19931 240.62688 441 241.24234 441 241.8739 c
441 251 l
441 252.65686 439.65686 254 438 254 c
67.3125 254 l
65.655647 254 64.3125 255.34314 64.3125 257 c
h
64.3125 257 m
f
2 J
0 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
145.3125 1023 m
145.3125 1011 l
145.3125 1009.3431 146.65564 1008 148.3125 1008 c
519 1008 l
520.65686 1008 522 1006.6569 522 1005 c
522 995.8739 l
522 994.21704 523.34314 992.8739 525 992.8739 c
525.63159 992.8739 526.24701 993.07324 526.75873 993.44348 c
555.9538 1014.5696 l
557.29608 1015.5409 557.5968 1017.4164 556.62549 1018.7587 c
556.43872 1019.0168 556.21198 1019.2436 555.9538 1019.4304 c
526.75873 1040.5565 l
525.41644 1041.5278 523.54089 1041.2271 522.56958 1039.8848 c
522.19934 1039.3732 522 1038.7577 522 1038.1261 c
522 1029 l
522 1027.3431 520.65686 1026 519 1026 c
148.3125 1026 l
146.65564 1026 145.3125 1024.6569 145.3125 1023 c
h
145.3125 1023 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 271.3125 263 cm
/F1.1[ 14 0 0 -14 0 0]sf
-202 4.8040009 m
(3**4$5\)4.6\))[ 9.072000 8.302000 8.302000 3.892000 4.410000 7.784000 7.518000 3.892000 7.252000 3.108000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
205.85057 212 m
205.85057 224 l
205.85057 225.65686 207.19373 227 208.85057 227 c
300.53809 227 l
302.19492 227 303.53809 228.34314 303.53809 230 c
303.53809 239.1261 l
303.53809 240.78294 304.88123 242.1261 306.53809 242.1261 c
307.16965 242.1261 307.78513 241.92677 308.29678 241.55652 c
337.49185 220.43042 l
338.83414 219.45912 339.13489 217.58359 338.16357 216.2413 c
337.97678 215.98314 337.75003 215.75638 337.49185 215.56958 c
308.29678 194.44348 l
306.9545 193.47218 305.07895 193.77292 304.10764 195.1152 c
303.7374 195.62688 303.53809 196.24234 303.53809 196.8739 c
303.53809 206 l
303.53809 207.65686 302.19492 209 300.53809 209 c
208.85057 209 l
207.19373 209 205.85057 210.34314 205.85057 212 c
h
205.85057 212 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
286.85059 1068 m
286.85059 1056 l
286.85059 1054.3431 288.19373 1053 289.85059 1053 c
381.53809 1053 l
383.19492 1053 384.53809 1051.6569 384.53809 1050 c
384.53809 1040.8739 l
384.53809 1039.217 385.88123 1037.8739 387.53809 1037.8739 c
388.16965 1037.8739 388.78513 1038.0732 389.29678 1038.4435 c
418.49185 1059.5696 l
419.83414 1060.5409 420.13489 1062.4164 419.16357 1063.7587 c
418.97678 1064.0168 418.75003 1064.2437 418.49185 1064.4304 c
389.29678 1085.5565 l
387.9545 1086.5278 386.07895 1086.2271 385.10764 1084.8848 c
384.7374 1084.3732 384.53809 1083.7577 384.53809 1083.1261 c
384.53809 1074 l
384.53809 1072.3431 383.19492 1071 381.53809 1071 c
289.85059 1071 l
288.19373 1071 286.85059 1069.6569 286.85059 1068 c
h
286.85059 1068 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 273.35059 218 cm
-34.874001 4.8040009 m
(7*-$4$5\)4.6\))[ 8.554000 8.302000 3.108000 4.410000 3.892000 4.410000 7.784000 7.518000 3.892000 7.252000 3.108000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 158 m
351 170 l
351 171.65686 352.34314 173 354 173 c
445.6875 173 l
447.34436 173 448.6875 174.34314 448.6875 176 c
448.6875 185.1261 l
448.6875 186.78294 450.03064 188.1261 451.6875 188.1261 c
452.31906 188.1261 452.93454 187.92677 453.4462 187.55652 c
482.6413 166.43042 l
483.98358 165.45912 484.2843 163.58359 483.31302 162.2413 c
483.12619 161.98314 482.89944 161.75638 482.6413 161.56958 c
453.4462 140.44348 l
452.10391 139.47218 450.22836 139.77292 449.25708 141.1152 c
448.88681 141.62688 448.6875 142.24234 448.6875 142.8739 c
448.6875 152 l
448.6875 153.65686 447.34436 155 445.6875 155 c
354 155 l
352.34314 155 351 156.34314 351 158 c
h
351 158 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
432 1122 m
432 1110 l
432 1108.3431 433.34314 1107 435 1107 c
526.6875 1107 l
528.34436 1107 529.6875 1105.6569 529.6875 1104 c
529.6875 1094.8739 l
529.6875 1093.217 531.03064 1091.8739 532.6875 1091.8739 c
533.31909 1091.8739 533.93451 1092.0732 534.44623 1092.4435 c
563.6413 1113.5696 l
564.98358 1114.5409 565.2843 1116.4164 564.31299 1117.7587 c
564.12622 1118.0168 563.89948 1118.2437 563.6413 1118.4304 c
534.44623 1139.5565 l
533.10394 1140.5278 531.22839 1140.2271 530.25708 1138.8848 c
529.88684 1138.3732 529.6875 1137.7577 529.6875 1137.1261 c
529.6875 1128 l
529.6875 1126.3431 528.34436 1125 526.6875 1125 c
435 1125 l
433.34314 1125 432 1123.6569 432 1122 c
h
432 1122 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 418.5 164 cm
-62.5 4.8040009 m
(1$&2\)4$5\)4.6\))[ 9.072000 4.410000 7.518000 8.036000 7.518000 3.892000 4.410000 7.784000 7.518000 3.892000 7.252000 3.108000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
189 122 m
189 134 l
189 135.65686 187.65686 137 186 137 c
94.3125 137 l
92.655647 137 91.3125 138.34314 91.3125 140 c
91.3125 149.1261 l
91.3125 150.78294 89.969353 152.1261 88.3125 152.1261 c
87.680923 152.1261 87.06546 151.92677 86.553802 151.55652 c
57.358715 130.43042 l
56.016426 129.45912 55.715687 127.58359 56.686989 126.2413 c
56.873798 125.98314 57.100552 125.75639 57.358715 125.56957 c
86.553802 104.44348 l
87.896088 103.47218 89.771622 103.77292 90.742928 105.1152 c
91.113174 105.62687 91.3125 106.24233 91.3125 106.87391 c
91.3125 116 l
91.3125 117.65685 92.655647 119 94.3125 119 c
186 119 l
187.65686 119 189 120.34315 189 122 c
h
189 122 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
270 1158 m
270 1146 l
270 1144.3431 268.65686 1143 267 1143 c
175.3125 1143 l
173.65564 1143 172.3125 1141.6569 172.3125 1140 c
172.3125 1130.8739 l
172.3125 1129.217 170.96936 1127.8739 169.3125 1127.8739 c
168.68092 1127.8739 168.06546 1128.0732 167.5538 1128.4435 c
138.35872 1149.5696 l
137.01643 1150.5409 136.71568 1152.4164 137.68698 1153.7587 c
137.87379 1154.0168 138.10056 1154.2437 138.35872 1154.4304 c
167.5538 1175.5565 l
168.89609 1176.5278 170.77162 1176.2271 171.74292 1174.8848 c
172.11317 1174.3732 172.3125 1173.7577 172.3125 1173.1261 c
172.3125 1164 l
172.3125 1162.3431 173.65564 1161 175.3125 1161 c
267 1161 l
268.65686 1161 270 1159.6569 270 1158 c
h
270 1158 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 121.5 128 cm
-34.478001 4.8040009 m
(8\)+,9\)4$5\)4.6\))[ 9.590000 7.518000 11.942000 8.036000 7.000000 7.518000 3.892000 4.410000 7.784000 7.518000 3.892000 7.252000 3.108000 0.000000 ] xS
/Cs1 SC
0.85490197 0.85490197 0.85490197 sc
CM
477 68 m
477 80 l
477 81.656853 475.65686 83 474 83 c
247.3125 83 l
245.65564 83 244.3125 84.343147 244.3125 86 c
244.3125 95.126091 l
244.3125 96.782944 242.96936 98.126091 241.3125 98.126091 c
240.68092 98.126091 240.06546 97.926765 239.5538 97.556519 c
210.35872 76.430428 l
209.01643 75.459122 208.71568 73.583588 209.68698 72.241302 c
209.87379 71.983139 210.10056 71.756386 210.35872 71.569572 c
239.5538 50.443481 l
240.89609 49.472179 242.77162 49.772919 243.74292 51.115208 c
244.11317 51.626873 244.3125 52.242336 244.3125 52.873909 c
244.3125 62 l
244.3125 63.656853 245.65564 65 247.3125 65 c
474 65 l
475.65686 65 477 66.343147 477 68 c
h
477 68 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -81 1280 cm
558 1212 m
558 1200 l
558 1198.3431 556.65686 1197 555 1197 c
328.3125 1197 l
326.65564 1197 325.3125 1195.6569 325.3125 1194 c
325.3125 1184.8739 l
325.3125 1183.217 323.96936 1181.8739 322.3125 1181.8739 c
321.68094 1181.8739 321.06546 1182.0732 320.5538 1182.4435 c
291.3587 1203.5696 l
290.01642 1204.5409 289.7157 1206.4164 290.68698 1207.7587 c
290.87381 1208.0168 291.10056 1208.2437 291.3587 1208.4304 c
320.5538 1229.5565 l
321.89609 1230.5278 323.77164 1230.2271 324.74292 1228.8848 c
325.11319 1228.3732 325.3125 1227.7577 325.3125 1227.1261 c
325.3125 1218 l
325.3125 1216.3431 326.65564 1215 328.3125 1215 c
555 1215 l
556.65686 1215 558 1213.6569 558 1212 c
h
558 1212 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 342 74 cm
-24.773001 4.8040009 m
(:,++-$)[ 10.108000 8.036000 11.942000 11.942000 3.108000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
