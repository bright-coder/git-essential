%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 402.000000 94.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 402 94
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 402 94
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /e put
dup 35 /m put
dup 36 /o put
dup 37 /t put
dup 38 /space put
dup 39 /r put
dup 40 /p put
dup 41 /L put
dup 42 /c put
dup 43 /a put
dup 44 /l put
dup 45 /T put
dup 46 /i put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<

58B0192F1BB1190A3E59B0004558B0062F1BB106063E59B0004558B0002F1BB100063E59B20C0619111239B00C2FB4BF0CCF0C025DB01910B11102B00A2B5821D81BF459B214190C111239B00610B12103B00A2B5821D81BF459B00C10B12602B00A2B5821D81BF4593031212626270606232226353436333335342623220615232726363332161511141617253236373523220615141603280A0B0137B166A9B1FBD7D6746A5F77BC0206EBBAB8E00C10FDEE6BAC1ADD778F5A314B264E69AD989BAF6B5F6F61440676C4BBB0FDF73A6C34906E47B078514854000000010061FFEB03F6044E001D003800B0004558B00F2F1BB10F0A3E59B0004558B0082F1BB108063E59B10002B00A2B5821D81BF459B00F10B11702B00A2B5821D81BF459303125323635331716042322023535341233321607072334262322061515141602476295B10205FEFDACECFAFBEBBEF10402B28C6B9B8584857958068CD90134E92AE70135E0A306638BDFA22AA6DD0000020063FFEB03ED044E0016001F006000B0004558B0072F1BB1070A3E59B0004558B0002F1BB100063E59B20B0007111239B00B2FB4D00BE00B025DB2A00B015DB00010B11002B00A2B5821D81BF459B00710B11702B00A2B5821D81BF459B00B10B11C02B00A2B5821D81BF459303105220035353400333212151521071616333236371706060322060717213534260250E2FEF50113BCDBE0FD42030398896497374D3ABEA5638C100201F37C15012DF02CE70133FEF8DC7B059CC9393280394C03C8A77E051A749C00000002009F00000164061800030007003600B0004558B0022F1BB1020A3E59B0004558B0002F1BB100063E59B00210B005B00A2B58D81BDC59B10604B00A2B5821D81BF459303121231133112335330164C5C5C5C5043A0115C90000000001009F0000016406180003001800B0022FB0004558B0002F1BB100063E59B22F02015D3031212311330164C5C506180001008F0000066F044E0023006F00B0004558B0042F1BB1040A3E59B0004558B00A2F1BB10A0A3E59B0004558B0232F1BB1230A3E59B0004558B00E2F1BB10E063E59B0004558B0182F1BB118063E59B0004558B0212F1BB121063E59B00A10B11302B00A2B5821D81BF459B00410B11D02B00A2B5821D81BF4593031011736363332161736363332161511231134262322060715112311342623220607112311013F0E35A36C6C9B2733A870A5C0C56E6D657D0BC6716A5A741FC5043A8E4D5564645C6CE3E4FD790289A0858C6B08FD510289988D4A43FCDF043A00020061FFEB042A044E000D001B003800B0004558B0032F1BB1030A3E59B0004558B00A2F1BB10A063E59B11102B00A2B5821D81BF459B00310B11802B00A2B5821D81BF45930311334003332001515140023220035331416333236


00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/L 2 def
/R 3 def
/T 4 def
/a 5 def
/c 6 def
/e 7 def
/i 8 def
/l 9 def
/m 10 def
/o 11 def
/p 12 def
/r 13 def
/t 14 def
/ogonek 15 def
/U.smcp 16 def
/Uogonek.smcp 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4247813 def
currentdict currentfile eexec

A00168E22312FC5402D007B7B7129AA1327E0A876C87338329397908C1E065CE20587D98A1A3C7A4433DB92E319F0E291681539AD5A2C49F4DDAA9F508F62B4E82364B990D9DD49B444C93E1348BC757B7625344E53BBB0EB29F18DFE614889EF37ECA40C4FBD441415844A2FD23C27FC02685B6197657F62AE275B635D9FEDE1C8B8030C8D04DB0AA74AAE255B3169AFEE269AB03ECB2AB9F01EC3DE3172B7BC4C016431A69830385C1F025952776401EE2FD9873900081A6A8DC61A90417B2F763EF48261CDF559D9D7BDE806A125E2D9C9A3ACD2AA64935A60B4E779F0FB28165502833A7FA993FF9CD20836F960FC2890ADFB10213D6ADABB7BD45B25282E6D41D51B44E4F05F33B4B791D455498416F4E79DE47C5AA84DDAB697A369AFB1BF9F05DF932BCAE70CDBF815C075E38BDB9AEAD04EC96B3676034962DF6770ECE16505E82C32A89AD7BC98D67F62DBB2D59F5ACD653A23D03066C066031FA7F261228D5614527F276F958BD68C62310A13AB7B04B960D21C044ADC5FD4E1D28B616A1F4AF0F73650ED1BB0DD7E36BCA71C743F8E21254DD884551478F8CEAABA749E15CFB4D0DA8CD9AD166A9FC137762FB1D543F1E4A3F517E7561D1309BB59CC8D58CC37C950426880D4DD22B38DE3C4836D9F3E7385132EB19AAC73F2DEB7C292B49D017EFAB5EFDF96B1027EC4C50C5A5E0E4D2BBFD82BC59AB21B59CE73E12DB46B9C6140FFDA8B0C68F8D6AADB2EFD478107BE6D44D68821A3B648474678A50A268ED30E0BF8EAF1D090E89F2DA1A701E1C83C4764CE4445732F90D507C8712346701C4D7564665A89DDE0CF526131EDF54DBE33437766930668F9A2721C2E511EB6F77E14A25B4BA830215CD7698204AC88F7794092DD8B2A05C29401B16CBE4D7C169E050FF31687BB04764BEB9C46AC57852216F121407B2E1CACD7D52D3CC1B86F8A48742F52572EE51B00205687AA6F88FC4C84A7684E7E5B38C3188F23E75951DEE78A2335D2E15C24C867EAC17B4ECAF17E74458520DE691129152CBB97A1464DD98FBDF366DEA29DC395A2D5AD3D8EECDCBF48F977DB1C59CDA066CF5B316B53B38A6E16394FDF9A4AB1FDA885A92829D44E1C81745511D3FD2930D51F2893A84D76AF216A2623AEB7BFD4C1C7298945AA72EA6010C2F54C9A2547E68E2B4CC6CA7BF02F30ED14605AE038D9C153C05F8E53F3EFBACAC50964F01F6BA1C604110376693EEDCC351922C2A8A1E52A4529146193500FCD9886DDD9683BFB46E8128620F423E7316E8FF43D5B29847C19FFBE37B0CDB1455E508C19B755EDA4EE9943924132D938A9ADE3422FE80FFE2FA1D6A8A8A3C84E474118BB878576EC1E3B7260031D41EC2E694C657DF747E0B9078441C2E5E82C4959BFE11002C94765B920C4816433D1A157388C334867302892661DF900EEA596273
9627EE8E762DDA1C6D3288D0A871450DA986744505BF037B5046103C0930AB4A6A0854D88BAB7030FB101F3B0A8C9A5C3443A7A5C8A08C0066FE4D1D06B5EECB329060BE3C4C61FB43B4D35548475391FBF56F0EF6CE856847B53D505BD5895284ECFFA200772F61D80F85966CD85C9BB438FAFC9F19C8AA7088E1F04E1FC168639598DED8E4F2847A0ACC4D73A78950D24DF215F5A0467F6CC8F808D70719EB98A179BBBF5B44C784D2A9FCD53C74B9A3E090DE805712541CEA299A3CB96CEC4F525DD381C0BF8FF40E840D3C5278B3A7532346DD42E94DB4C8A1FD05B57C2F6F1886345C1C5E5393213665E4EDDEA04BEA4DC07F7FE1E06593A2347E646B6A02AE0A8F587587B163F109F8007A656BB500BCC42B68B152BC66F76E168E529A004F4939192031602A87235EDD5B9FE0E19FDB4D94A5CC9E145C79FA60C8691CB828246CCDBB3C46E6855B7B79E0DAA24C782DB49B2EACD10772AC20E8569C1AF0667E6E4703B57CD1267E16C8C191247166C27ADDCFD6F1E369C89F58C4A6075B13D384F0D737588874A1518C07FEE294BF9ACADA646036AAA107B495F06793E72315E9236894D61FE3AB24C97607C8196CD26E7DE88BE6A41D26A8EF156DF989AF7078B3C367535CF7133BC57B989162973B9B7DE60AB1172DC5DB21D2E607E80FD525D0E25ACC8E7FD3374EF74929170F3F9D84991E7F0FB4182A5249410C4D5D22CA4A1C9169035BEB0D98F87FFA08FCEA8178D76C80EB73AC0CC86A778787E367F78822352461C862BF059769CB103A28EFFE05E9D6D2EB5C893D5F691E72FCB296FA74979E61C01D4D8E0A3487767B4A3EF77F6EFA40D7C9ACBC9DB098534463F1334450D748938D70E09814811D0AF4F90DDC00237A82F11417671E3D0D0E375886B4A953A40C6F770AC4823E88E832D61BC582A7CF0574CE057FD4362D360603
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 402 94 rc
-391 431 m
465 431 l
465 -487 l
-391 -487 l
h
-391 431 m
f
191.36395 80.363953 m
194.87869 76.849236 194.87869 71.150764 191.36395 67.636047 c
187.84924 64.121315 182.15076 64.121315 178.63605 67.636047 c
175.12131 71.150764 175.12131 76.849236 178.63605 80.363953 c
182.15076 83.878685 187.84924 83.878685 191.36395 80.363953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -391 431 cm
582.36395 350.63605 m
585.87866 354.15076 585.87866 359.84924 582.36395 363.36395 c
578.84924 366.87869 573.15076 366.87869 569.63605 363.36395 c
566.12134 359.84924 566.12134 354.15076 569.63605 350.63605 c
573.15076 347.12131 578.84924 347.12131 582.36395 350.63605 c
S
0 i
1 1 1 sc
CM
308.36395 80.363953 m
311.87869 76.849236 311.87869 71.150764 308.36395 67.636047 c
304.84924 64.121315 299.15076 64.121315 295.63605 67.636047 c
292.12131 71.150764 292.12131 76.849236 295.63605 80.363953 c
299.15076 83.878685 304.84924 83.878685 308.36395 80.363953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -391 431 cm
699.36395 350.63605 m
702.87866 354.15076 702.87866 359.84924 699.36395 363.36395 c
695.84924 366.87869 690.15076 366.87869 686.63605 363.36395 c
683.12134 359.84924 683.12134 354.15076 686.63605 350.63605 c
690.15076 347.12131 695.84924 347.12131 699.36395 350.63605 c
S
0 i
1 1 1 sc
CM
101.36395 26.363955 m
104.87868 22.849237 104.87868 17.150763 101.36395 13.636046 c
97.849236 10.121312 92.150764 10.121312 88.636047 13.636046 c
85.121315 17.150763 85.121315 22.849237 88.636047 26.363955 c
92.150764 29.878689 97.849236 29.878689 101.36395 26.363955 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -391 431 cm
492.36395 404.63605 m
495.87869 408.15076 495.87869 413.84924 492.36395 417.36395 c
488.84924 420.87869 483.15076 420.87869 479.63605 417.36395 c
476.12131 413.84924 476.12131 408.15076 479.63605 404.63605 c
483.15076 401.12131 488.84924 401.12131 492.36395 404.63605 c
S
0 i
1 1 1 sc
CM
146.36395 26.363955 m
149.87869 22.849237 149.87869 17.150763 146.36395 13.636046 c
142.84924 10.121312 137.15076 10.121312 133.63605 13.636046 c
130.12131 17.150763 130.12131 22.849237 133.63605 26.363955 c
137.15076 29.878689 142.84924 29.878689 146.36395 26.363955 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -391 431 cm
537.36395 404.63605 m
540.87866 408.15076 540.87866 413.84924 537.36395 417.36395 c
533.84924 420.87869 528.15076 420.87869 524.63605 417.36395 c
521.12134 413.84924 521.12134 408.15076 524.63605 404.63605 c
528.15076 401.12131 533.84924 401.12131 537.36395 404.63605 c
S
0 i
1 1 1 sc
CM
236.36395 26.363955 m
239.87869 22.849237 239.87869 17.150763 236.36395 13.636046 c
232.84924 10.121312 227.15076 10.121312 223.63605 13.636046 c
220.12131 17.150763 220.12131 22.849237 223.63605 26.363955 c
227.15076 29.878689 232.84924 29.878689 236.36395 26.363955 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -391 431 cm
627.36395 404.63605 m
630.87866 408.15076 630.87866 413.84924 627.36395 417.36395 c
623.84924 420.87869 618.15076 420.87869 614.63605 417.36395 c
611.12134 413.84924 611.12134 408.15076 614.63605 404.63605 c
618.15076 401.12131 623.84924 401.12131 627.36395 404.63605 c
S
0 i
1 1 1 sc
CM
281.36395 26.363955 m
284.87869 22.849237 284.87869 17.150763 281.36395 13.636046 c
277.84924 10.121312 272.15076 10.121312 268.63605 13.636046 c
265.12131 17.150763 265.12131 22.849237 268.63605 26.363955 c
272.15076 29.878689 277.84924 29.878689 281.36395 26.363955 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -391 431 cm
672.36395 404.63605 m
675.87866 408.15076 675.87866 413.84924 672.36395 417.36395 c
668.84924 420.87869 663.15076 420.87869 659.63605 417.36395 c
656.12134 413.84924 656.12134 408.15076 659.63605 404.63605 c
663.15076 401.12131 668.84924 401.12131 672.36395 404.63605 c
S
441 383.5 m
737.09998 383.5 l
S
0 J
0 j
0 i
745.09998 383.5 m
737.09998 383.5 l
737.09998 380.5 m
745.09998 383.5 l
737.09998 386.5 l
S
1 J
1 j
0.60000002 i
683.5 357.00284 m
595.39996 357.0293 l
S
0 J
0 j
0 i
587.39996 357.03171 m
595.39996 357.0293 l
595.40088 360.0293 m
587.39996 357.03171 l
595.39905 354.0293 l
S
1 J
1 j
0.60000002 i
521.50024 411.06842 m
505.39633 411.18439 l
S
0 J
0 j
0 i
497.39655 411.242 m
505.39633 411.18439 l
505.41794 414.1843 m
497.39655 411.242 l
505.37473 408.18445 l
S
1 J
1 j
0.60000002 i
611.5 411.00662 m
550.39984 411.04916 l
S
0 J
0 j
0 i
542.39984 411.05475 m
550.39984 411.04916 l
550.40192 414.04916 m
542.39984 411.05475 l
550.39777 408.04916 l
S
1 J
1 j
0.60000002 i
656.50024 411.06842 m
640.3963 411.18439 l
S
0 J
0 j
0 i
632.39655 411.242 m
640.3963 411.18439 l
640.41791 414.1843 m
632.39655 411.242 l
640.37469 408.18445 l
S
/Cs2 SC
0 sc
1 0 0 -1 43 69.5 cm
/F1.1[ 10 0 0 -10 0 0]sf
-28.779297 3.5 m
(!"#$%"&'"\($)[ 6.625977 5.288086 8.740234 5.683594 3.457031 5.288086 2.485352 3.334961 5.288086 5.683594 0.000000 ] xS
1 0 0 -1 37.5 24.5 cm
-23.442383 3.5 m
(\)$*+,&'"\($)[ 5.400391 5.683594 5.307617 5.498047 2.519531 2.485352 3.334961 5.288086 5.683594 0.000000 ] xS
1 0 0 -1 376 47 cm
-11.203613 3.5 m
(-.#")[ 5.859375 2.519531 8.740234 0.000000 ] xS
ep
end
%%Trailer
%%EOF
