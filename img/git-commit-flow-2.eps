%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 385.000000 146.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 385 146
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 385 146
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /three put
dup 34 /four put
dup 35 /two put
dup 36 /zero put
dup 37 /d put
dup 38 /e put
dup 39 /one put
dup 40 /c put
dup 41 /a put
dup 42 /six put
dup 43 /eight put
dup 44 /f put
dup 45 /five put
dup 46 /T put
dup 47 /i put
dup 48 /m put
dup 49 /H put
dup 50 /E put
dup 51 /A put
dup 52 /D put
dup 53 /asciitilde put
dup 54 /asciicircum put
dup 55 /nine put
dup 56 /b put
dup 57 /seven put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<

69978FBD02050104E6C4E98D7FFE810202BC8702128FA8586D959B8C06BC0100E5B177EF89FE5F050001005FFFEB03FB05C5002A007700B0002FB0004558B00F2F1BB10F0C3E59B0004558B01B2F1BB11B063E59B2CF00015DB21F000171B2BF000171B2EF00015DB27F00015DB22F00015DB00F10B10702B00A2B5821D81BF459B00F10B00AD0B01B10B020D0B01B10B12302B00A2B5821D81BF459B00010B12A02B00A2B5821D81BF4593031013332363534262322061523272636333216151406071616151404232224373733141633323635342623230184AC836D7C79738BBD0205F9C9CAF06D6D836DFEFBCBC7FEFB0503BC8D7B7D8E7E88AC033383757D82877006A5E7D7C75AB32F2BB872C7E4D7B8067388888587800000000200370000045205B0000A000F004A00B0012FB0004558B0092F1BB1090C3E59B0004558B0042F1BB104063E59B00110B10202B00A2B5821D81BF459B006D0B00110B00BD0B00910B00ED040096B0E7B0E8B0E9B0E045D3031013315231123112135013301211127070389C9C9C4FD720282D0FD8001BC061301EA9AFEB001506F03F1FC3A02AB0132000000010098FFEB041305B0001F005900B0082FB0004558B0012F1BB1010C3E59B0004558B00E2F1BB10E063E59B00110B10303B00A2B5821D81BF459B00E10B013D0B00E10B11602B00A2B5821D81BF459B00810B11C03B00A2B5821D81BF459B00810B01FD030311313211521033636373612151402232226373733141633323635342623220607AF5402D9FDCE302E714AC9E7EBE1B9F60502B2896D7D8A8C7B7468180291031FAFFE67222D0202FEF6E1DBFEF6CAC4067783B0998CB446480000020084FFEB043705C5001A0027005100B0004558B0002F1BB1000C3E59B0004558B0142F1BB114063E59B00010B10702B00A2B5821D81BF459B20E1400111239B00E2FB11B02B00A2B5821D81BF459B01410B12202B00A2B5821D81BF45930310132161707262623220615153636333212151402232200111110001322060715141633323635342602A34B93302A316B489CBF40A55FC3E8F7CED6FEE80138A4658E25AA8079879105C5221A97191FFAC917383FFEF2CFE2FEE30136011A01160118015CFD6F524476C9DACD9890BA0001004D0000042605B0000C002F00B0004558B00B2F1BB10B0C3E59B0004558B0042F1BB104063E59B00B10B10902B00A2B5821D81BF459B000D03031010002030723371212132135210426FEF8B92910C5102AF2D2FCE803D90515FEC6FE1BFEA79D9D0158021E01029B0000030066FFEB041A05C500170023002F006400B0004558B0152F1BB1150C3E59B0004558B0092F1BB109063E59B22D0915111239B02D2FB2CF2D015DB11B02B00A2B5821D81BF459B2031B2D111239B20F2D1B111239B00910B12102
B00A2B5821D81BF459B01510B12702B00A2B5821D81BF459303101140607161615140423222435343637262635343633321603342623220615141633323603342623220615141633323603F2806D7E97FEF9D2D6FEFB947E6D7CEDC3C0F39C9E797B99987E7B9A2987676982836A6884043472AB2A2CBC7BCAD5D5CA7BBC2C2AAB72C0D1D1FC9A789A9A787C8D8E031D6C8E89716F86860000020053FFEB040105C5001A0027004E00B0004558B00D2F1BB10D0C3E59B0004558B0142F1BB114063E59B10002B00A2B5821D81BF459B207140D111239B0072FB11B02B00A2B5821D81BF459B00D10B12202B00A2B5821D81BF45930312532363535060623220235340033320011111000232226273716161332363735342623220615141601FF90AD31935AD3F80107BCE40107FEE3E54D9F3F1E3B7F726D9120938D6C988D85DAD74247490105E5DB0118FEE3FEEBFEA5FEE3FED01D1E971F1901FD5E497EBFC4C19796BA000000000200140000051A05B00007000B006200B0004558B0052F1BB1050C3E59B0004558B0022F1BB102063E59B0004558B0072F1BB107063E59B2010205111239B0012FB48F019F01025DB10802B00A2B5821D81BF459B00510B00AD0B43B0A4B0A025DB67B0A8B0A9B0A035DB2690A015D303101210323013301230121032303C9FD9E8AC90233A9022AC9FD5301EAF0060177FE8905B0FA50021C0297000200B4000004EB05B000090013003B00B0004558B0012F1BB1010C3E59B0004558B0002F1BB100063E59B00110B10A02B00A2B5821D81BF459B00010B10B02B00A2B5821D81BF45930313311212000111510002103113332123535340223B401BF011E015AFEA6FEE2FAFACAE9E9CA05B0FEA1FEEAC7FEE9FEA30515FB85010AD0C9CE010A0000000100B40000047A05B0000B005C00B00B2FB0004558B0062F1BB1060C3E59B0004558B0042F1BB104063E59B2EF0B015DB27F0B015DB22F0B015DB00B10B10002B00A2B5821D81BF459B00410B10202B00A2B5821D81BF459B00610B10802B00A2B5821D81BF45930310121112115211121152111210414FD650301FC3A03BBFD0A029B02A3FDF79A05B09BFE290000000100B40000050105B0000B00A400B0082FB0004558B0062F1BB1060C3E59B0004558B00A2F1BB10A0C3E59B0004558B0002F1BB100063E59B0004558B0042F1BB104063E59B27F08015DB2CF08015DB21F080171B27F080171B4BF08CF080271B21F080172B26F080172B2BF080172B48F089F080272B23F080172B2EF080171B29F080171B24F080171B4EF08FF08025DB2AF08015DB25F08015DB22F08015DB00810B10302B00A2B5821D81BF45930312123112111231133112111330501C5FD3DC5C502C3C50283FD7D05B0FD6E02920000000100220000048E05B00007002F00B0



00>] def
/CharStrings 29 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/seven 8 def
/eight 9 def
/nine 10 def
/A 11 def
/D 12 def
/E 13 def
/H 14 def
/T 15 def
/asciicircum 16 def
/a 17 def
/b 18 def
/c 19 def
/d 20 def
/e 21 def
/f 22 def
/i 23 def
/m 24 def
/asciitilde 25 def
/ogonek 26 def
/U.smcp 27 def
/Uogonek.smcp 28 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4247813 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693441BFA40888AF905FF75E47F70DE4CD49D4BBBBBA99C8B9C05B033FB8DE22D7D3FF19D06CB555A6AC06A365378D4943652CD0F3F51165FA5F08A351EFEDF345EDCFEF3C151F56CCA897DB8A76B981826ACAA4953845657FC886AFB7954652165B24D29CC6A5C2ABDC33FA3509F82D4E5880931B18355702DF927A4A1E5C8FC4F4E7EDA3497DBBCD67AFCB8FFE30EF9774395212587B5ABB98C35CD445CF73D94861298C5383978B23F07A813F152547C9175258395C74E457EC92F17F85C94F0DA517C0816D1AD249DF38EF57DFD104836CCAE83D1D2851C47DD17E9DEEB8526F20E6547A6F6629AD7F1EE8DA35FDF231F5AA3B3E381FF35AC82034EDF79885E0BC5E5BFB1A30B58EB2F136A32DE188C2FC26E17091D30BF98EE30F15FA1DC6EE353D123D6B8EA69464B0990CD5D4ED8A003D5346800C916DB7A3C5F98028885B775FEA93D1DE5882995878C6E0C36F359E5DD80F235A208ED13919FC059F5F4053363256BE0A1D8AABB7C9FCCD2326DC5E6E47710389EEC15E12621132FFDF35486D2BF501602299EF43CEBF15DF48B53D4ABC2401A0FEF853D7A8E79B2F66C08E039AE000AA4F62AF423ADD367616608839293C2BBD3B5C7BBC648FDCB17D539AF44E6A307D2A7F0AAEFFC90D946118107DD4BB13EB2B0A89652C8CEEC3CAC8521CCDE89A8976580660D21B4D47EB06420D57F557BF820D1368DBE9FC27BFB4541051DB77EB330E5B0172AB313FF552A8FDFA92D621D11201CC44B5A3CB980C6A61E6DB6C36A7E02D615840B70262E1D9C929A



460360F62D978EEAFF8016B405A7D536E4F761A82F4F9F597B3A62C90BEC03997F1541242C2ADDC710E8917D82342342F19DBB112993BBADA697B633F2EC356BB48AB45C8D5ED477BC27E7ED19A397C8A789AEC8FDF3D8C0F491D0F0EC28CC7736B5C5EB7F7CE2C47D0C915A795284FA07268B4CCA22478DE85A6AC09E7F118F76AF3D9C5959459BC5A660535D374E53C7820408BCC6E2CD3389013BD3058F11212B277E03B80BB8C9B505CFAE4AA664DC7B7C112D3F86D334F87597AEFFB582215E6386DC2D1C31FDD79086DABA544E97B5DFD8DB60BB1A1C6ABCB4364A142906DA3B38B7ABDBD9EF6FA29CB014B0269AF8DDFB2727C3E1880AF7F20613BCD4F140B4759B29393E1FB896A4EFBFA53C141E0EA8B4654EF18AFFF9228E9F4F4978627874AD99C592751B2A3B64315C1C9DCD550ED727B9F78C19D1EF29CC4A18985304BEE1B9588F26412FE3BBC2B4201C305BA9CEDAF99186A39D152D9B72E01E2025B57DB41547853CC5F88F9972A90862DDE4EEEB18CC38C6B74094747EB2437FB65F6388EDAEF2057DB741DA29F69BB772212658C06D2D10B1F1A98DC7ED315AD40820049349E8DD996B987FF7AA0560C87D9F18C89B40447AB1A34C776F9E30FF31D73EEA57B208F51F314E89638C30915D354E96268077C312D37F65178CC013C815C240D4A652A8A43246C702BBE3C9DB836733A065E68AAC8860E3CC549D465A6513F43633BA0C9E27B705CC1FBAD0AA536486C03D35AFB2AD5E9FAC670FFC2F43C41C8B0C6E6DB9724F1880E9998E1C113690E163DDB554AE47101373646BD4F53F0656
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 385 146 rc
-619 869 m
870 869 l
870 -63 l
-619 -63 l
h
-619 869 m
f
123.1048 84.113953 m
126.61951 87.628685 132.31799 87.628685 135.8327 84.113953 c
139.34744 80.599236 139.34744 74.900764 135.8327 71.386047 c
132.31799 67.871315 126.61951 67.871315 123.1048 71.386047 c
119.59007 74.900764 119.59007 80.599236 123.1048 84.113953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
742.1048 784.88605 m
745.61951 781.37134 751.31799 781.37134 754.8327 784.88605 c
758.34741 788.40076 758.34741 794.09924 754.8327 797.61395 c
751.31799 801.12866 745.61951 801.12866 742.1048 797.61395 c
738.59009 794.09924 738.59009 788.40076 742.1048 784.88605 c
S
0 i
1 1 1 sc
CM
222.1048 84.113953 m
225.61951 87.628685 231.31799 87.628685 234.8327 84.113953 c
238.34744 80.599236 238.34744 74.900764 234.8327 71.386047 c
231.31799 67.871315 225.61951 67.871315 222.1048 71.386047 c
218.59006 74.900764 218.59006 80.599236 222.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
841.1048 784.88605 m
844.61951 781.37134 850.31799 781.37134 853.8327 784.88605 c
857.34741 788.40076 857.34741 794.09924 853.8327 797.61395 c
850.31799 801.12866 844.61951 801.12866 841.1048 797.61395 c
837.59009 794.09924 837.59009 788.40076 841.1048 784.88605 c
S
0 i
1 1 1 sc
CM
294.1048 84.113953 m
297.61951 87.628685 303.31799 87.628685 306.8327 84.113953 c
310.34744 80.599236 310.34744 74.900764 306.8327 71.386047 c
303.31799 67.871315 297.61951 67.871315 294.1048 71.386047 c
290.59006 74.900764 290.59006 80.599236 294.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
913.1048 784.88605 m
916.61951 781.37134 922.31799 781.37134 925.8327 784.88605 c
929.34741 788.40076 929.34741 794.09924 925.8327 797.61395 c
922.31799 801.12866 916.61951 801.12866 913.1048 797.61395 c
909.59009 794.09924 909.59009 788.40076 913.1048 784.88605 c
S
0 i
1 1 1 sc
CM
348.1048 84.113953 m
351.61951 87.628685 357.31799 87.628685 360.8327 84.113953 c
364.34744 80.599236 364.34744 74.900764 360.8327 71.386047 c
357.31799 67.871315 351.61951 67.871315 348.1048 71.386047 c
344.59006 74.900764 344.59006 80.599236 348.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
967.1048 784.88605 m
970.61951 781.37134 976.31799 781.37134 979.8327 784.88605 c
983.34741 788.40076 983.34741 794.09924 979.8327 797.61395 c
976.31799 801.12866 970.61951 801.12866 967.1048 797.61395 c
963.59009 794.09924 963.59009 788.40076 967.1048 784.88605 c
S
0 i
1 1 1 sc
CM
24.104795 84.113953 m
27.619513 87.628685 33.317989 87.628685 36.832703 84.113953 c
40.347439 80.599236 40.347439 74.900764 36.832703 71.386047 c
33.317989 67.871315 27.619513 67.871315 24.104795 71.386047 c
20.590061 74.900764 20.590061 80.599236 24.104795 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
643.1048 784.88605 m
646.61951 781.37134 652.31799 781.37134 655.8327 784.88605 c
659.34741 788.40076 659.34741 794.09924 655.8327 797.61395 c
652.31799 801.12866 646.61951 801.12866 643.1048 797.61395 c
639.59009 794.09924 639.59009 788.40076 643.1048 784.88605 c
S
0 i
1 1 1 sc
CM
69.104797 84.113953 m
72.619514 87.628685 78.317986 87.628685 81.832703 84.113953 c
85.347435 80.599236 85.347435 74.900764 81.832703 71.386047 c
78.317986 67.871315 72.619514 67.871315 69.104797 71.386047 c
65.590065 74.900764 65.590065 80.599236 69.104797 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
688.1048 784.88605 m
691.61951 781.37134 697.31799 781.37134 700.8327 784.88605 c
704.34741 788.40076 704.34741 794.09924 700.8327 797.61395 c
697.31799 801.12866 691.61951 801.12866 688.1048 797.61395 c
684.59009 794.09924 684.59009 788.40076 688.1048 784.88605 c
S
0 i
1 1 1 sc
CM
186.1048 84.113953 m
189.61951 87.628685 195.31799 87.628685 198.8327 84.113953 c
202.34744 80.599236 202.34744 74.900764 198.8327 71.386047 c
195.31799 67.871315 189.61951 67.871315 186.1048 71.386047 c
182.59006 74.900764 182.59006 80.599236 186.1048 84.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
805.1048 784.88605 m
808.61951 781.37134 814.31799 781.37134 817.8327 784.88605 c
821.34741 788.40076 821.34741 794.09924 817.8327 797.61395 c
814.31799 801.12866 808.61951 801.12866 805.1048 797.61395 c
801.59009 794.09924 801.59009 788.40076 805.1048 784.88605 c
S
684.96875 791.25 m
668.86877 791.25 l
S
0 J
0 j
0 i
660.86877 791.25 m
668.86877 791.25 l
668.86877 794.25 m
660.86877 791.25 l
668.86877 788.25 l
S
1 J
1 j
0.60000002 i
738.96875 791.25 m
713.86877 791.25 l
S
0 J
0 j
0 i
705.86877 791.25 m
713.86877 791.25 l
713.86877 794.25 m
705.86877 791.25 l
713.86877 788.25 l
S
1 J
1 j
0.60000002 i
801.96875 791.25 m
767.86877 791.25 l
S
0 J
0 j
0 i
759.86877 791.25 m
767.86877 791.25 l
767.86877 794.25 m
759.86877 791.25 l
767.86877 788.25 l
S
1 J
1 j
0.60000002 i
837.96875 791.25 m
830.86877 791.25 l
S
0 J
0 j
0 i
822.86877 791.25 m
830.86877 791.25 l
830.86877 794.25 m
822.86877 791.25 l
830.86877 788.25 l
S
1 J
1 j
0.60000002 i
909.96875 791.25 m
866.86877 791.25 l
S
0 J
0 j
0 i
858.86877 791.25 m
866.86877 791.25 l
866.86877 794.25 m
858.86877 791.25 l
866.86877 788.25 l
S
1 J
1 j
0.60000002 i
963.96875 791.25 m
938.86877 791.25 l
S
0 J
0 j
0 i
930.86877 791.25 m
938.86877 791.25 l
938.86877 794.25 m
930.86877 791.25 l
938.86877 788.25 l
S
1 1 1 sc
1 0 0 -1 30.53125 55 cm
/F1.1[ 7 0 0 -7 0 0]sf
-13.694092 2.5 m
(!"#$%&')[ 3.940918 3.940918 3.940918 3.944336 3.978516 3.701660 0.000000 ] xS
1 0 0 -1 76.46875 55 cm
-13.555664 2.5 m
($&#!'!&)[ 3.944336 3.701660 3.940918 3.940918 3.940918 3.940918 0.000000 ] xS
1 0 0 -1 130.46875 55 cm
-13.533447 2.5 m
('&!\("\)%)[ 3.940918 3.701660 3.940918 3.715332 3.940918 3.848633 0.000000 ] xS
1 0 0 -1 193.46875 55 cm
-12.914795 2.5 m
(*+&,#$$)[ 3.940918 3.940918 3.701660 2.416504 3.940918 3.944336 0.000000 ] xS
1 0 0 -1 228.46875 55 cm
-14.676758 2.5 m
(-,\)\)#"&\()[ 3.940918 2.416504 3.848633 3.848633 3.940918 3.940918 3.701660 0.000000 ] xS
1 0 0 -1 300.46875 55 cm
-12.760986 2.5 m
(\)\($#'\(,)[ 3.848633 3.715332 3.944336 3.940918 3.940918 3.715332 0.000000 ] xS
1 0 0 -1 354.46875 55 cm
-12.711426 2.5 m
(",\(\)&'#)[ 3.940918 2.334473 3.715332 3.848633 3.701660 3.940918 0.000000 ] xS
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -619 869 cm
630 837 m
982.84998 837 l
S
0 J
0 j
0 i
990.84998 837 m
982.84998 837 l
982.84998 834 m
990.84998 837 l
982.84998 840 l
S
1 0 0 -1 192.375 19 cm
-7.8425293 2.5 m
(./0&)[ 4.101562 1.763672 6.118164 0.000000 ] xS
1 1 1 sc
1 0 0 -1 354.375 109 cm
-9.1140137 2.5 m
(1234)[ 4.993652 4.091309 4.532227 0.000000 ] xS
1 0 0 -1 300.375 109 cm
-13.46167 2.5 m
(12345')[ 4.993652 4.091309 4.532227 4.610840 4.754395 0.000000 ] xS
1 0 0 -1 300.375 127 cm
-10.576904 2.5 m
(12346)[ 4.993652 4.091309 4.532227 4.610840 0.000000 ] xS
1 0 0 -1 228.375 109 cm
-16.144775 2.5 m
(",\(\)&'#6!)[ 3.940918 2.334473 3.715332 3.848633 3.701660 3.940918 3.940918 2.925781 0.000000 ] xS
1 0 0 -1 129.375 109 cm
-14.377686 2.5 m
(*+&,#$$6)[ 3.940918 3.940918 3.701660 2.416504 3.940918 3.944336 3.944336 0.000000 ] xS
0 0 0 sc
1 0 0 -1 94.84034 100 cm
-77.931396 2.5 m
(!"#$%&'\)&!'7&\)%\($\)87\)79-*#!"&%$+-$\)!&%\)7)[ 3.940918 3.940918 3.940918 3.944336 3.978516 3.701660 3.940918 3.848633 3.701660 3.940918 3.940918 3.940918 3.701660 3.848633 3.978516 3.715332 3.944336 3.848633 3.978516 3.940918 3.848633 3.940918 3.940918 3.940918 3.940918 3.940918 3.940918 3.940918 3.701660 3.978516 3.944336 3.940918 3.940918 3.944336 3.848633 3.940918 3.701660 3.978516 3.848633 0.000000 ] xS
ep
end
%%Trailer
%%EOF
