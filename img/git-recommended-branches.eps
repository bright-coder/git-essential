%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 276.000000 387.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 276 387
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 276 387
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /a put
dup 35 /s put
dup 36 /t put
dup 37 /e put
dup 38 /r put
dup 39 /H put
dup 40 /o put
dup 41 /fi put
dup 42 /x put
dup 43 /R put
dup 44 /l put
dup 45 /D put
dup 46 /v put
dup 47 /p put
dup 48 /zero put
dup 49 /period put
dup 50 /one put
dup 51 /b put
dup 52 /F put
dup 53 /u put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<


37B166A9B1FBD7D6746A5F77BC0206EBBAB8E00C10FDEE6BAC1ADD778F5A314B264E69AD989BAF6B5F6F61440676C4BBB0FDF73A6C34906E47B07851485400000002008FFFEB042B06180011001F005000B00A2FB0004558B00E2F1BB10E0A3E59B0004558B0032F1BB103063E59B0004558B0082F1BB108063E59B22F0A015DB00E10B11502B00A2B5821D81BF459B00310B11C02B00A2B5821D81BF45930310114022322262707231133113636333212112334262322060711161633323635042BE1C56B9E3418A1C5339765C8E0C5898C5B7D25267B5E8B8801F4EAFEE153518F0618FDA2484CFEC0FEFBBAEB594BFE2B505AC6A3000000020063FFEB03ED044E0016001F006000B0004558B0072F1BB1070A3E59B0004558B0002F1BB100063E59B20B0007111239B00B2FB4D00BE00B025DB2A00B015DB00010B11002B00A2B5821D81BF459B00710B11702B00A2B5821D81BF459B00B10B11C02B00A2B5821D81BF459303105220035353400333212151521071616333236371706060322060717213534260250E2FEF50113BCDBE0FD42030398896497374D3ABEA5638C100201F37C15012DF02CE70133FEF8DC7B059CC9393280394C03C8A77E051A749C00000001009F0000016406180003001800B0022FB0004558B0002F1BB100063E59B22F02015D3031212311330164C5C5061800020061FFEB042A044E000D001B003800B0004558B0032F1BB1030A3E59B0004558B00A2F1BB10A063E59B11102B00A2B5821D81BF459B00310B11802B00A2B5821D81BF459303113340033320015151400232200353314163332363535342623220615610104DFE10105FEFCE0E0FEFBC5918F8D92938E8D910227F00137FECAF116F2FECC0135F1ACE0E0AC16AAE2E2AA00000002008FFE600429044E0011001F005500B0004558B00E2F1BB10E0A3E59B0004558B00A2F1BB10A0A3E59B0004558B0072F1BB107083E59B0004558B0032F1BB103063E59B00E10B11502B00A2B5821D81BF459B00310B11C02B00A2B5821D81BF459303101140223222627112311331736363332121123342623220607111616333236350429E0C5649735C5971F359E69C9DFC5918D5578252578578C9001F4EAFEE14343FDEF05DA8C4E52FEC1FEFAB8ED4D43FDF5434BCDA2000001008F000002AA044E000F003E00B0004558B0072F1BB1070A3E59B0004558B00C2F1BB10C0A3E59B0004558B0052F1BB105063E59B00C10B001B00A2B58D81BDC59B48F019F01025D303101272206071123113317363633321617028F654E6B1DC5B0132E875816280D038C064A43FCFB043A9E545E070400000000010067FFEB03C9044E0027007E00B0004558B0092F1BB1090A3E59B0004558B01D2F1BB11D063E59B2171D09111239B429173917025DB6B917C917D917035D


00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/period 1 def
/zero 2 def
/one 3 def
/D 4 def
/F 5 def
/H 6 def
/M 7 def
/R 8 def
/a 9 def
/b 10 def
/e 11 def
/l 12 def
/o 13 def
/p 14 def
/r 15 def
/s 16 def
/t 17 def
/u 18 def
/v 19 def
/x 20 def
/ogonek 21 def
/fi 22 def
/U.smcp 23 def
/Uogonek.smcp 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4247813 def
currentdict currentfile eexec


0785A1D94CB65440E959502165CE0AE9A361B12A611056B17FD017F859DE4705937DB8AE9A461E109BED561D5932B07EC48D9591C99C8CB921C3727C6859271D075BB30E36DF47A9A507F4210A2D59677478256F1E2F282E7FF956EB7AE6390238F0B2E1FCEF3AFADF4245891BEF1A5CAE6499590E7AC4D974E10AE6013A1C0BBF05C2FF49E376CCA9758B8CCF4011BA2863EBBAF038DDBF4C14778BADDE6BF162E10FF8B1C661A07B7CD542D5D0F59A23DC24A0D28BC7974894D22237065DB91C479E4E96BDAF0BBB6F18E85C0BA7052B56CC84B1B2AD3284FC469CB36D35E98DFB76FFB0F2C5B80F13B362CFF6B119B4959548BB4D5B5B06B66579DDDC63F19E7F1E8DD8C24DEE0E717C77836430B7EDCE6B0E771D1D64EF265619982BB041F23EEC993E499A6A14CFE8114AEB453E196D024CDDDD923A3178571E23ECFB17F2AF77248CC704D1172874583FC9C164225E6BE10779EECE953AE61225BE359FF5961E0EDDEBBD769D387F0051A788E964FAFDEAD630513C17B0760497225452BC4A9347464DAD76B78B142BE9B5F1ED341A0F19EE821EFF6CFF640EC530E85B2A1EDB0EE8799047D19A68A99384915573399B78BDB1D02C774DD92A78BD5DCC246057617F4C43EDCB24128134B96DFD5BD57CFB14890305C64CF1E01B67F83F57DA86245F40EB9909158919BCC1EC70631C75CC455CA87665F10CB7C0A6836F3A3B47DF480B7F83A06A954BB67F50137660FC6FC288175CF4A9EBAEF35CBF444E65603D03B7CE74768EA848B023BCAED300192FAA6854F639C913355789CACACEF5105ABC4D2B951B76694D45BDA6B4ED44A1CD8C5DB264106BD952EAEA527D950041E4DB68F1EC8ED41D093513D0F6EC0A0C54FC5D1182798B387327D6BD1C2CCF8A8C98D66352454CCECDDD5E93E07F94A0B5EDA90D88A9136F3E90D0C75C95EEA10A940D11D82F8E91BEBE62509B69B1E079B3103DEACAD4FADEF2803AE3831F742B6FEAD0D40F32E354B12F4846C9E38712B728C366C8B114C15BF489A7DF9F79D636636932E7D80ABA28E010B74FF0FEB777D4F2BC05214E7E9C0E3D5DF44F026DE4A8BAFE281729106FAF88880D219FC34B4A94B8FC9C10D7F8420744FE5E292930F153A997F8A2A440F599FEB3787FDD1B63EED41CB479DE493A02EE20DA24657EF45A184C1D5623548F1E185D32A9C947FF0ED85A9736E888D6D4ED5FD7F09DF0946A7840E664F7D1329A4A7F649FEC8D72F9BBB9B213A3D836CDE0F7C415B0796F287E607E6B8593E02C8CDC6369A61F43856595D9B383C3B06BC00CE1E3000C3F684B38555ED4E87614683BA9DA2F92074D48ADEF587307D07B642ECD33F5899AB09F92A04BB514CC71ABD0FB7DCC6599E256113285A8044CCA29A09F14AE44A050D43C9B7B1FFE55AC57B8119287C3FFF7B9AB1EC51311C56281
2BE004F9473EA556D2A5FA72490C2B5250FD9AAE11559709559CE66BB13FB7874E5C42BB4BBFEF436533F3C406D1862AF39F2EC4F887B2C1062B5754F330FE1FEBE6724912E6F034276F1A5F40996AF3911A7116922BAE706D4F4BF7158570FA070D34BDF9BA8FD111CEC10AE815E9DAF68592A726B5E55F5B38B90C2F5191C2AFAA4CB0D12FBE395F67640ADF343C70C5509C5A8FF6396A0B2B36DF95B9725B7894B9750F4BD0EDAD184B40681A1068F0EE3C3DD340E4BBE769017EAB23E81177066D36272207F2799918F1B4BFBE38C7F0214B4F2C4600C0B6685092FA69553DCD91B0D727632DAFBF7205BDCFB578957160B21C26569E9929C45C9A003D38C424BC7D842A57AE58B735D8B2FD0FE874227D767C6426C673BA71002D5ACBB9E7089411DC6CEEBD8635ED5D3BB39C632FFEE414191733A28CD9A8E002846DF5A447EBC2998C287241128E3D8364AA059353F4EF095C1BCFD9C2E583C06EB311044CBB2B199808FBFAB7B4EBCAB4ED57A351647622F8ED50C3E58C41911DEA4794BE8FB19686F8A2F1B11A7F75EA5A81D70972D162C87CA3E4D5FCC85B7289E6487096BA067340DCD5C52302723487D720E75CA1284E119583F4CC612A108B3C5913D6650C7CF3142FEC834FB79B567900CEDBD2532328504978D8772E89B659BF8D69524173110744BDEE1410DF5200D95DEA4E05A592A27A98D642A986459E0847A1A821B0F3BE5B4881D82098B09E4394245754757A77EBE72731266498955381A23F1B7FAA2E98A421C0B55C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 276 387 rc
-22 453 m
741 453 l
741 -465 l
-22 -465 l
h
-22 453 m
f
2 w
1 J
1 j
0.60000002 i
0.64705884 0.64705884 0.64705884 sc
1 0 0 -1 -22 453 cm
233.43597 441.75803 m
234.11043 105.78602 l
233.65794 441.50797 m
234.34172 106.98425 l
S
0.64705902 0.64705902 0.64705902 sc
188.49933 442.47336 m
188.65388 106.63982 l
188.73853 442.22336 m
188.77945 107.80258 l
S
143.50034 442.08102 m
143.39439 106.06672 l
143.62317 441.83109 m
143.46706 107.21188 l
S
99.000755 441.68869 m
98.634933 107.49362 l
99.007202 441.43896 m
98.654671 108.62125 l
S
53.503357 442.79636 m
52.875507 106.92052 l
53.643425 442.54657 m
53.092285 108.03025 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 211.4375 366 cm
/F1.1[ 10 0 0 -10 0 0]sf
-15.842285 3.5 m
(!"#$%&)[ 8.784180 5.498047 5.229492 3.457031 5.288086 0.000000 ] xS
1 0 0 -1 166.5 366 cm
-13.435059 3.5 m
('\($\)*)[ 7.133789 5.683594 3.457031 5.566406 0.000000 ] xS
1 0 0 -1 121.5 366 cm
-17.868652 3.5 m
(+%,%"#%)[ 6.625977 5.288086 2.519531 5.288086 5.498047 5.229492 0.000000 ] xS
1 0 0 -1 77 366 cm
-17.976074 3.5 m
(-%.%,\(/)[ 6.586914 5.224609 4.965820 5.288086 2.519531 5.683594 0.000000 ] xS
1 0 0 -1 245 55.375 cm
-16.481934 3.5 m
(.010123)[ 5.029297 5.634766 2.675781 5.634766 2.675781 5.629883 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
218.36395 315.36395 m
221.87869 311.84924 221.87869 306.15076 218.36395 302.63605 c
214.84924 299.12131 209.15076 299.12131 205.63605 302.63605 c
202.12131 306.15076 202.12131 311.84924 205.63605 315.36395 c
209.15076 318.87869 214.84924 318.87869 218.36395 315.36395 c
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
240.36395 137.63605 m
243.87869 141.15076 243.87869 146.84924 240.36395 150.36395 c
236.84924 153.87869 231.15076 153.87869 227.63605 150.36395 c
224.12131 146.84924 224.12131 141.15076 227.63605 137.63605 c
231.15076 134.12131 236.84924 134.12131 240.36395 137.63605 c
S
0 i
1 1 1 sc
CM
83.363953 257.76395 m
86.878685 254.24924 86.878685 248.55077 83.363953 245.03604 c
79.849236 241.52132 74.150764 241.52132 70.636047 245.03604 c
67.121315 248.55077 67.121315 254.24924 70.636047 257.76395 c
74.150764 261.27869 79.849236 261.27869 83.363953 257.76395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 195.23605 m
108.87868 198.75076 108.87868 204.44923 105.36395 207.96396 c
101.84924 211.47868 96.150764 211.47868 92.636047 207.96396 c
89.121315 204.44923 89.121315 198.75076 92.636047 195.23605 c
96.150764 191.72131 101.84924 191.72131 105.36395 195.23605 c
S
0 i
1 1 1 sc
CM
83.363953 196.56395 m
86.878685 193.04924 86.878685 187.35077 83.363953 183.83604 c
79.849236 180.32132 74.150764 180.32132 70.636047 183.83604 c
67.121315 187.35077 67.121315 193.04924 70.636047 196.56395 c
74.150764 200.07869 79.849236 200.07869 83.363953 196.56395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 256.43604 m
108.87868 259.95078 108.87868 265.64923 105.36395 269.16394 c
101.84924 272.67868 96.150764 272.67868 92.636047 269.16394 c
89.121315 265.64923 89.121315 259.95078 92.636047 256.43604 c
96.150764 252.92131 101.84924 252.92131 105.36395 256.43604 c
S
0 i
1 1 1 sc
CM
83.363953 227.16396 m
86.878685 223.64923 86.878685 217.95076 83.363953 214.43605 c
79.849236 210.92131 74.150764 210.92131 70.636047 214.43605 c
67.121315 217.95076 67.121315 223.64923 70.636047 227.16396 c
74.150764 230.67868 79.849236 230.67868 83.363953 227.16396 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 225.83604 m
108.87868 229.35077 108.87868 235.04924 105.36395 238.56395 c
101.84924 242.07869 96.150764 242.07869 92.636047 238.56395 c
89.121315 235.04924 89.121315 229.35077 92.636047 225.83604 c
96.150764 222.32132 101.84924 222.32132 105.36395 225.83604 c
S
0 i
1 1 1 sc
CM
83.363953 165.96396 m
86.878685 162.44923 86.878685 156.75076 83.363953 153.23605 c
79.849236 149.72131 74.150764 149.72131 70.636047 153.23605 c
67.121315 156.75076 67.121315 162.44923 70.636047 165.96396 c
74.150764 169.47868 79.849236 169.47868 83.363953 165.96396 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 287.03604 m
108.87868 290.55075 108.87868 296.24924 105.36395 299.76395 c
101.84924 303.27869 96.150764 303.27869 92.636047 299.76395 c
89.121315 296.24924 89.121315 290.55075 92.636047 287.03604 c
96.150764 283.5213 101.84924 283.5213 105.36395 287.03604 c
S
0 i
1 1 1 sc
CM
83.363953 135.36395 m
86.878685 131.84924 86.878685 126.15076 83.363953 122.63605 c
79.849236 119.12132 74.150764 119.12132 70.636047 122.63605 c
67.121315 126.15076 67.121315 131.84924 70.636047 135.36395 c
74.150764 138.87869 79.849236 138.87869 83.363953 135.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 317.63605 m
108.87868 321.15076 108.87868 326.84924 105.36395 330.36395 c
101.84924 333.87869 96.150764 333.87869 92.636047 330.36395 c
89.121315 326.84924 89.121315 321.15076 92.636047 317.63605 c
96.150764 314.12131 101.84924 314.12131 105.36395 317.63605 c
S
0 i
1 1 1 sc
CM
38.363953 225.36395 m
41.878689 221.84924 41.878689 216.15076 38.363953 212.63605 c
34.849239 209.12131 29.150763 209.12131 25.636045 212.63605 c
22.121311 216.15076 22.121311 221.84924 25.636045 225.36395 c
29.150763 228.87869 34.849239 228.87869 38.363953 225.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
60.363953 227.63605 m
63.878689 231.15076 63.878689 236.84924 60.363953 240.36395 c
56.849239 243.87869 51.150761 243.87869 47.636047 240.36395 c
44.121311 236.84924 44.121311 231.15076 47.636047 227.63605 c
51.150761 224.12131 56.849239 224.12131 60.363953 227.63605 c
S
0 i
1 1 1 sc
CM
38.363953 171.36395 m
41.878689 167.84924 41.878689 162.15076 38.363953 158.63605 c
34.849239 155.12131 29.150763 155.12131 25.636045 158.63605 c
22.121311 162.15076 22.121311 167.84924 25.636045 171.36395 c
29.150763 174.87869 34.849239 174.87869 38.363953 171.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
60.363953 281.63605 m
63.878689 285.15076 63.878689 290.84924 60.363953 294.36395 c
56.849239 297.87869 51.150761 297.87869 47.636047 294.36395 c
44.121311 290.84924 44.121311 285.15076 47.636047 281.63605 c
51.150761 278.12131 56.849239 278.12131 60.363953 281.63605 c
S
0 i
1 1 1 sc
CM
218.36395 196.79184 m
221.87869 193.27713 221.87869 187.57866 218.36395 184.06393 c
214.84924 180.54921 209.15076 180.54921 205.63605 184.06393 c
202.12131 187.57866 202.12131 193.27713 205.63605 196.79184 c
209.15076 200.30658 214.84924 200.30658 218.36395 196.79184 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
240.36395 256.20816 m
243.87869 259.72287 243.87869 265.42136 240.36395 268.93607 c
236.84924 272.45081 231.15076 272.45081 227.63605 268.93607 c
224.12131 265.42136 224.12131 259.72287 227.63605 256.20816 c
231.15076 252.69342 236.84924 252.69342 240.36395 256.20816 c
S
0 i
1 1 1 sc
CM
173.36395 227.25075 m
176.87869 223.73602 176.87869 218.03755 173.36395 214.52284 c
169.84924 211.0081 164.15076 211.0081 160.63605 214.52284 c
157.12131 218.03755 157.12131 223.73602 160.63605 227.25075 c
164.15076 230.76549 169.84924 230.76549 173.36395 227.25075 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
195.36395 225.74925 m
198.87869 229.26398 198.87869 234.96245 195.36395 238.47716 c
191.84924 241.9919 186.15076 241.9919 182.63605 238.47716 c
179.12131 234.96245 179.12131 229.26398 182.63605 225.74925 c
186.15076 222.23451 191.84924 222.23451 195.36395 225.74925 c
S
0 i
1 1 1 sc
CM
128.36395 99.363953 m
131.87869 95.849236 131.87869 90.150764 128.36395 86.636047 c
124.84924 83.121315 119.15076 83.121315 115.63605 86.636047 c
112.12132 90.150764 112.12132 95.849236 115.63605 99.363953 c
119.15076 102.87868 124.84924 102.87868 128.36395 99.363953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
150.36395 353.63605 m
153.87869 357.15076 153.87869 362.84924 150.36395 366.36395 c
146.84924 369.87869 141.15076 369.87869 137.63605 366.36395 c
134.12131 362.84924 134.12131 357.15076 137.63605 353.63605 c
141.15076 350.12131 146.84924 350.12131 150.36395 353.63605 c
S
0 i
1 1 1 sc
CM
217.80145 63.071472 m
221.31619 59.556759 221.31619 53.85828 217.80145 50.343567 c
214.28674 46.828831 208.58826 46.828831 205.07355 50.343567 c
201.55881 53.85828 201.55881 59.556759 205.07355 63.071472 c
208.58826 66.586205 214.28674 66.586205 217.80145 63.071472 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
239.80145 389.92853 m
243.31619 393.44324 243.31619 399.14172 239.80145 402.65643 c
236.28674 406.17117 230.58826 406.17117 227.07355 402.65643 c
223.55881 399.14172 223.55881 393.44324 227.07355 389.92853 c
230.58826 386.41379 236.28674 386.41379 239.80145 389.92853 c
S
234 153.5 m
234 243.1721 l
S
0 J
0 j
0 i
234 251.1721 m
234 243.1721 l
237 243.1721 m
234 251.1721 l
231 243.1721 l
S
1 J
1 j
0.60000002 i
224.89899 146.7303 m
162.5835 165.42496 l
S
0 J
0 j
0 i
154.92088 167.72374 m
162.5835 165.42496 l
163.44554 168.29843 m
154.92088 167.72374 l
161.72145 162.55147 l
S
1 J
1 j
0.60000002 i
229.67789 152.46259 m
197.82333 214.83308 l
S
0 J
0 j
0 i
194.1846 221.95766 m
197.82333 214.83308 l
200.49506 216.1976 m
194.1846 221.95766 l
195.15163 213.46855 l
S
1 J
1 j
0.60000002 i
196.86797 237.44017 m
217.93044 251.70041 l
S
0 J
0 j
0 i
224.55495 256.18549 m
217.93044 251.70041 l
219.61235 249.21623 m
224.55495 256.18549 l
216.24854 254.1846 l
S
1 J
1 j
0.60000002 i
181.13203 237.44017 m
160.06956 251.70041 l
S
0 J
0 j
0 i
153.44505 256.18549 m
160.06956 251.70041 l
161.75146 254.1846 m
153.44505 256.18549 l
158.38765 249.21623 l
S
1 J
1 j
0.60000002 i
136.14285 176.34286 m
115.04372 190.69026 l
S
0 J
0 j
0 i
108.42831 195.18875 m
115.04372 190.69026 l
116.73066 193.17105 m
108.42831 195.18875 l
113.3568 188.20949 l
S
1 J
1 j
0.60000002 i
99 211.10001 m
99 212.8 l
S
0 J
0 j
0 i
99 220.8 m
99 212.8 l
102 212.8 m
99 220.8 l
96 212.8 l
S
1 J
1 j
0.60000002 i
99 241.7 m
99 243.39999 l
S
0 J
0 j
0 i
99 251.39999 m
99 243.39999 l
102 243.39999 m
99 251.39999 l
96 243.39999 l
S
1 J
1 j
0.60000002 i
99 272.30002 m
99 274 l
S
0 J
0 j
0 i
99 282 m
99 274 l
102 274 m
99 282 l
96 274 l
S
1 J
1 j
0.60000002 i
99 302.89999 m
99 304.60001 l
S
0 J
0 j
0 i
99 312.60001 m
99 304.60001 l
102 304.60001 m
99 312.60001 l
96 304.60001 l
S
1 J
1 j
0.60000002 i
91.316765 207.18951 m
69.84639 222.80908 l
S
0 J
0 j
0 i
63.377182 227.5154 m
69.84639 222.80908 l
71.611259 225.23503 m
63.377182 227.5154 l
68.081528 220.38313 l
S
1 J
1 j
0.60000002 i
54 243.5 m
54 268.60001 l
S
0 J
0 j
0 i
54 276.60001 m
54 268.60001 l
57 268.60001 m
54 276.60001 l
51 268.60001 l
S
1 J
1 j
0.60000002 i
61.418816 293.93515 m
83.850357 311.88065 l
S
0 J
0 j
0 i
90.097267 316.87827 m
83.850357 311.88065 l
85.724457 309.53806 m
90.097267 316.87827 l
81.976257 314.22324 l
S
1 J
1 j
0.60000002 i
106.41886 329.93509 m
128.85054 347.88043 l
S
0 J
0 j
0 i
135.09749 352.87799 m
128.85054 347.88043 l
130.72462 345.53781 m
135.09749 352.87799 l
126.97645 350.22302 l
S
1 J
1 j
0.60000002 i
152.80495 363.57312 m
215.4584 388.99847 l
S
0 J
0 j
0 i
222.87128 392.00671 m
215.4584 388.99847 l
216.58649 386.21866 m
222.87128 392.00671 l
214.33032 391.77832 l
S
1 J
1 j
0.60000002 i
233.96004 272.07202 m
233.5191 376.89264 l
S
0 J
0 j
0 i
233.48546 384.89258 m
233.5191 376.89264 l
236.51909 376.90527 m
233.48546 384.89258 l
230.51913 376.88004 l
S
1 1 1 sc
CM
128.36395 288.36395 m
131.87869 284.84924 131.87869 279.15076 128.36395 275.63605 c
124.84924 272.12131 119.15076 272.12131 115.63605 275.63605 c
112.12132 279.15076 112.12132 284.84924 115.63605 288.36395 c
119.15076 291.87869 124.84924 291.87869 128.36395 288.36395 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
150.36395 164.63605 m
153.87869 168.15076 153.87869 173.84924 150.36395 177.36395 c
146.84924 180.87869 141.15076 180.87869 137.63605 177.36395 c
134.12131 173.84924 134.12131 168.15076 137.63605 164.63605 c
141.15076 161.12131 146.84924 161.12131 150.36395 164.63605 c
S
144.00002 180.5 m
144.00002 243.1721 l
S
0 J
0 j
0 i
144.00002 251.1721 m
144.00002 243.1721 l
147.00002 243.1721 m
144.00002 251.1721 l
141.00002 243.1721 l
S
1 1 1 sc
CM
128.36395 196.79184 m
131.87869 193.27713 131.87869 187.57866 128.36395 184.06393 c
124.84924 180.54921 119.15076 180.54921 115.63605 184.06393 c
112.12132 187.57866 112.12132 193.27713 115.63605 196.79184 c
119.15076 200.30658 124.84924 200.30658 128.36395 196.79184 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
150.36395 256.20816 m
153.87869 259.72287 153.87869 265.42136 150.36395 268.93607 c
146.84924 272.45081 141.15076 272.45081 137.63605 268.93607 c
134.12131 265.42136 134.12131 259.72287 137.63605 256.20816 c
141.15076 252.69342 146.84924 252.69342 150.36395 256.20816 c
S
136.16141 267.94211 m
115.006 282.43506 l
S
0 J
0 j
0 i
108.4062 286.95639 m
115.006 282.43506 l
116.70151 284.91 m
108.4062 286.95639 l
113.3105 279.96014 l
S
1 J
1 j
0.60000002 i
144.00002 272.07211 m
144.00002 340.60001 l
S
0 J
0 j
0 i
144.00002 348.60001 m
144.00002 340.60001 l
147.00002 340.60001 m
144.00002 348.60001 l
141.00002 340.60001 l
S
/Cs2 SC
0 sc
1 0 0 -1 238 190.875 cm
-9.4848633 3.5 m
(.012)[ 5.029297 5.634766 2.675781 0.000000 ] xS
1 0 0 -1 238 309.125 cm
-9.4824219 3.5 m
(.212)[ 5.029297 5.629883 2.675781 0.000000 ] xS
1 0 0 -1 31.5 366 cm
-17.13623 3.5 m
(4%"$5&%)[ 5.722656 5.288086 5.498047 3.457031 5.683594 3.334961 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
83.363953 288.26288 m
86.878685 284.74817 86.878685 279.04968 83.363953 275.53497 c
79.849236 272.02023 74.150764 272.02023 70.636047 275.53497 c
67.121315 279.04968 67.121315 284.74817 70.636047 288.26288 c
74.150764 291.77762 79.849236 291.77762 83.363953 288.26288 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 164.73712 m
108.87868 168.25183 108.87868 173.95032 105.36395 177.46503 c
101.84924 180.97977 96.150764 180.97977 92.636047 177.46503 c
89.121315 173.95032 89.121315 168.25183 92.636047 164.73712 c
96.150764 161.22238 101.84924 161.22238 105.36395 164.73712 c
S
0 i
1 1 1 sc
CM
83.363953 320.94012 m
86.878685 317.42542 86.878685 311.72693 83.363953 308.21222 c
79.849236 304.69748 74.150764 304.69748 70.636047 308.21222 c
67.121315 311.72693 67.121315 317.42542 70.636047 320.94012 c
74.150764 324.45486 79.849236 324.45486 83.363953 320.94012 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -22 453 cm
105.36395 132.05988 m
108.87868 135.57458 108.87868 141.27307 105.36395 144.78778 c
101.84924 148.30252 96.150764 148.30252 92.636047 144.78778 c
89.121315 141.27307 89.121315 135.57458 92.636047 132.05988 c
96.150764 128.54514 101.84924 128.54514 105.36395 132.05988 c
S
98.993324 180.60107 m
98.992203 182.20001 l
S
0 J
0 j
0 i
98.98658 190.20001 m
98.992203 182.20001 l
101.9922 182.20212 m
98.98658 190.20001 l
95.992203 182.19791 l
S
1 J
1 j
0.60000002 i
99.000015 147.92383 m
99.000015 151.70107 l
S
0 J
0 j
0 i
99.000015 159.70107 m
99.000015 151.70107 l
102.00002 151.70107 m
99.000015 159.70107 l
96.000015 151.70107 l
S
1 J
1 j
0.60000002 i
234 108 m
234 124.6 l
S
0 J
0 j
0 i
234 132.59999 m
234 124.6 l
237 124.6 m
234 132.59999 l
231 124.6 l
S
1 J
1 j
0.60000002 i
233.4375 405.79248 m
233.4375 418.85001 l
S
0 J
0 j
0 i
233.4375 426.85001 m
233.4375 418.85001 l
236.4375 418.85001 m
233.4375 426.85001 l
230.4375 418.85001 l
S
ep
end
%%Trailer
%%EOF
