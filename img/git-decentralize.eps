%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 328.000000 286.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 328 286
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 328 286
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /G put
dup 34 /i put
dup 35 /t put
dup 36 /space put
dup 37 /R put
dup 38 /e put
dup 39 /m put
dup 40 /o put
dup 41 /A put
dup 42 /l put
dup 43 /c put
dup 44 /C put
dup 45 /a put
dup 46 /r put
dup 47 /F put
dup 48 /y put
dup 49 /h put
dup 50 /B put
dup 51 /b put
dup 52 /D put
dup 53 /n put
dup 54 /E put
dup 55 /v put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 27 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/B 3 def
/C 4 def
/D 5 def
/E 6 def
/F 7 def
/G 8 def
/R 9 def
/a 10 def
/b 11 def
/c 12 def
/e 13 def
/h 14 def
/i 15 def
/l 16 def
/m 17 def
/n 18 def
/o 19 def
/r 20 def
/t 21 def
/v 22 def
/y 23 def
/ogonek 24 def
/U.smcp 25 def
/Uogonek.smcp 26 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4247813 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693441BFA40888AF905FF75E47F70DE4CD49D4BBBBBA99C8B9C05B033FB8DE22D7D3FF19D06CB555A6AC06A365378D4943652CD0F3F51165FA5F08A351EFEDF345EDCFEF3C151F56CCA897DB8A76B981826ACAA4953845657FC886AFB7954652165B24D29CC6A5C2ABDC33FA3509F82D4E5880931B18355702DF927A4A1E5C8FC4F4E7EDA3497DBBCD67AFCB8FFE30EF9774395212587B5ABB98C35CD445CF73D94861298C5383978B23F07A813F152547C9175258395C74E457EC92F17F85C94F0DA517C0816D1AD249DF38EF57DFD104836CCAE83D1D2851C47DD17E9DEEB8526F20E6547A6F6629AD7F1EE8DA35FDF231F5AA3BDF3B0EB32310EEEF74296E4123275F11735AA13D4DD6C9BCED45AC0A6B1E339B6B68232862E78556B3ACAFC793354864FE022C1CB9E03B02F8467EA9F048F5D45EBD0C5D66AC6A304232D040843D3681FF58732FEA7B52CDE5C1717CE8713EAF0131B7F3906C872A4964EF49193257C0F637CD1E8933E2CC33EF6975DCAC29FEDE39E1D8D6F72F5CF3B9F8096AB0472CCF21A9AD2B9A7F41FCEEE44AE510D72193E036D34B93F2F23CEE7EB6FE3D32A927370055F1120B941730FC6B1D2A81D5CAF13235B39B314B3BA875509AB5E51A125676A1F5992E04302C587CF738BB5D88B61C80D65E8BF21203E39BC2817A342007BD5088356C073367D3301D10330FBE4864D43B405FE6EB526CCD819DDBC208090AFD2A827533FD4AB130D5FF89AFEA48A7B93FD2120AFA8A1917E91C57395AE2A4BC1ADFCCB74903852CCBC943931



0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 328 286 rc
-415 768 m
608 768 l
608 -64 l
-415 -64 l
h
-415 768 m
f
158.36395 144.36395 m
161.87869 140.84924 161.87869 135.15076 158.36395 131.63605 c
154.84924 128.12131 149.15076 128.12131 145.63605 131.63605 c
142.12131 135.15076 142.12131 140.84924 145.63605 144.36395 c
149.15076 147.87869 154.84924 147.87869 158.36395 144.36395 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
573.36395 623.63605 m
576.87866 627.15076 576.87866 632.84924 573.36395 636.36395 c
569.84924 639.87866 564.15076 639.87866 560.63605 636.36395 c
557.12134 632.84924 557.12134 627.15076 560.63605 623.63605 c
564.15076 620.12134 569.84924 620.12134 573.36395 623.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 152 120.05882 cm
/F1.1[ 10 0 0 -10 0 0]sf
-25.180664 3.5 m
(!"#$%&'\(#&)[ 6.816406 2.519531 3.457031 2.485352 6.625977 5.288086 8.740234 5.683594 3.457031 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
32.363953 225.36395 m
35.878689 221.84924 35.878689 216.15076 32.363953 212.63605 c
28.849237 209.12131 23.150763 209.12131 19.636045 212.63605 c
16.121311 216.15076 16.121311 221.84924 19.636045 225.36395 c
23.150763 228.87869 28.849237 228.87869 32.363953 225.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
447.36395 542.63605 m
450.87869 546.15076 450.87869 551.84924 447.36395 555.36395 c
443.84924 558.87866 438.15076 558.87866 434.63605 555.36395 c
431.12131 551.84924 431.12131 546.15076 434.63605 542.63605 c
438.15076 539.12134 443.84924 539.12134 447.36395 542.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 26 201.05882 cm
-11.054688 3.5 m
(\)*"+&)[ 6.474609 2.519531 2.519531 5.307617 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
149.36395 252.36395 m
152.87869 248.84924 152.87869 243.15076 149.36395 239.63605 c
145.84924 236.12131 140.15076 236.12131 136.63605 239.63605 c
133.12131 243.15076 133.12131 248.84924 136.63605 252.36395 c
140.15076 255.87869 145.84924 255.87869 149.36395 252.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
564.36395 515.63605 m
567.87866 519.15076 567.87866 524.84924 564.36395 528.36395 c
560.84924 531.87866 555.15076 531.87866 551.63605 528.36395 c
548.12134 524.84924 548.12134 519.15076 551.63605 515.63605 c
555.15076 512.12134 560.84924 512.12134 564.36395 515.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 143 264.05884 cm
-11.682129 3.5 m
(,-.\(*)[ 6.333008 5.498047 3.330078 5.683594 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
293.36395 234.36395 m
296.87869 230.84924 296.87869 225.15076 293.36395 221.63605 c
289.84924 218.12131 284.15076 218.12131 280.63605 221.63605 c
277.12131 225.15076 277.12131 230.84924 280.63605 234.36395 c
284.15076 237.87869 289.84924 237.87869 293.36395 234.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
708.36395 533.63605 m
711.87866 537.15076 711.87866 542.84924 708.36395 546.36395 c
704.84924 549.87866 699.15076 549.87866 695.63605 546.36395 c
692.12134 542.84924 692.12134 537.15076 695.63605 533.63605 c
699.15076 530.12134 704.84924 530.12134 708.36395 533.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 287 246.05882 cm
-15.270996 3.5 m
(/-0#1&)[ 5.659180 5.424805 5.029297 3.457031 5.683594 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
50.363953 45.363953 m
53.878689 41.849239 53.878689 36.150761 50.363953 32.636047 c
46.849239 29.121311 41.150761 29.121311 37.636047 32.636047 c
34.121311 36.150761 34.121311 41.849239 37.636047 45.363953 c
41.150761 48.878689 46.849239 48.878689 50.363953 45.363953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
465.36395 722.63605 m
468.87869 726.15076 468.87869 731.84924 465.36395 735.36395 c
461.84924 738.87866 456.15076 738.87866 452.63605 735.36395 c
449.12131 731.84924 449.12131 726.15076 452.63605 722.63605 c
456.15076 719.12134 461.84924 719.12134 465.36395 722.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 44 21.058823 cm
-8.8793945 3.5 m
(2\(3)[ 6.391602 5.683594 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -415 768 cm
460.23074 710.17767 m
467.11823 674.55005 500.63541 628.70551 548.13391 629.23322 c
S
0 J
0 j
0 i
556.10571 629.85278 m
548.12976 629.23291 l
548.36224 626.24194 m
556.10571 629.85278 l
547.89728 632.22388 l
S
459.23624 718.11475 m
460.23087 710.17682 l
463.20758 710.5498 m
459.23624 718.11475 l
457.25415 709.80383 l
S
1 J
1 j
0.60000002 i
458.68088 555.21362 m
495.98154 561.11188 537.25037 598.06995 553.0661 621.41583 c
S
0 J
0 j
0 i
557.05322 628.35272 m
553.06665 621.41675 l
555.66766 619.92181 m
557.05322 628.35272 l
550.4657 622.91168 l
S
450.70581 554.56293 m
458.67929 555.2135 l
458.43533 558.20355 m
450.70581 554.56293 l
458.92328 552.22345 l
S
1 J
1 j
0.60000002 i
554.99707 540.58105 m
544.61493 570.19513 554.69788 598.90881 561.64844 612.67004 c
S
0 J
0 j
0 i
565.97302 619.40149 m
561.64886 612.67078 l
564.17291 611.04926 m
565.97302 619.40149 l
559.12488 614.29236 l
S
558.11902 533.21075 m
554.99872 540.57709 l
552.23633 539.40698 m
558.11902 533.21075 l
557.76111 541.74725 l
S
1 J
1 j
0.60000002 i
683.95105 545.03906 m
629.76074 546.72742 588.31641 562.99457 570.48663 611.32184 c
S
0 J
0 j
0 i
568.01532 618.93555 m
570.48517 611.32635 l
573.33862 612.25256 m
568.01532 618.93555 l
567.63171 610.40015 l
S
691.95221 544.9176 m
683.95312 545.039 l
683.90759 542.03937 m
691.95221 544.9176 l
683.99866 548.03864 l
S
1 1 1 sc
CM
311.36395 144.36395 m
314.87869 140.84924 314.87869 135.15076 311.36395 131.63605 c
307.84924 128.12131 302.15076 128.12131 298.63605 131.63605 c
295.12131 135.15076 295.12131 140.84924 298.63605 144.36395 c
302.15076 147.87869 307.84924 147.87869 311.36395 144.36395 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
726.36395 623.63605 m
729.87866 627.15076 729.87866 632.84924 726.36395 636.36395 c
722.84924 639.87866 717.15076 639.87866 713.63605 636.36395 c
710.12134 632.84924 710.12134 627.15076 713.63605 623.63605 c
717.15076 620.12134 722.84924 620.12134 726.36395 623.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 305 120.05882 cm
-8.8842773 3.5 m
(4-5)[ 6.586914 5.498047 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
275.36395 54.363953 m
278.87869 50.849239 278.87869 45.150761 275.36395 41.636047 c
271.84924 38.121311 266.15076 38.121311 262.63605 41.636047 c
259.12131 45.150761 259.12131 50.849239 262.63605 54.363953 c
266.15076 57.878689 271.84924 57.878689 275.36395 54.363953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -415 768 cm
690.36395 713.63605 m
693.87866 717.15076 693.87866 722.84924 690.36395 726.36395 c
686.84924 729.87866 681.15076 729.87866 677.63605 726.36395 c
674.12134 722.84924 674.12134 717.15076 677.63605 713.63605 c
681.15076 710.12134 686.84924 710.12134 690.36395 713.63605 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 269 30.058823 cm
-7.9858398 3.5 m
(67&)[ 5.717773 4.965820 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -415 768 cm
703.24408 623.2655 m
660.10602 586.16388 604.72845 588.24146 581.03333 621.47668 c
S
0 J
0 j
0 i
576.96613 628.36395 m
581.03406 621.4754 l
583.61725 623.00092 m
576.96613 628.36395 l
578.45087 619.94995 l
S
709.10736 628.70746 m
703.24377 623.2652 l
705.28461 621.06635 m
709.10736 628.70746 l
701.20294 625.46405 l
S
1 J
1 j
0.60000002 i
678.57794 704.20105 m
680.85449 665.63574 624.03955 627.25928 585.80396 628.63629 c
S
0 J
0 j
0 i
577.8819 629.73822 m
585.8056 628.63611 l
586.21893 631.60748 m
577.8819 629.73822 l
585.39227 625.66467 l
S
677.06171 712.05237 m
678.57867 704.19751 l
681.52423 704.76636 m
677.06171 712.05237 l
675.63306 703.62866 l
S
ep
end
%%Trailer
%%EOF
