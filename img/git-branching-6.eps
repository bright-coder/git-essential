%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 383.000000 160.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 383 160
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 383 160
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Roboto-Regular
%!FontType1-1.0: Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /d put
dup 34 /e put
dup 35 /v put
dup 36 /l put
dup 37 /o put
dup 38 /p put
dup 39 /m put
dup 40 /n put
dup 41 /t put
dup 42 /a put
dup 43 /s put
dup 44 /r put
dup 45 /h put
dup 46 /fi put
dup 47 /x put
dup 48 /one put
dup 49 /zero put
dup 50 /two put
dup 51 /f put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/a 4 def
/d 5 def
/e 6 def
/f 7 def
/h 8 def
/l 9 def
/m 10 def
/n 11 def
/o 12 def
/p 13 def
/r 14 def
/s 15 def
/t 16 def
/v 17 def
/x 18 def
/ogonek 19 def
/fi 20 def
/U.smcp 21 def
/Uogonek.smcp 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4247813 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693441BFA40888AF905FF75E47F70DE4CD49D4BBBBBA99C8B9C05B033FB8DE22D7D3FF19D06CB555A6AC06A365378D4943652CD0F3F51165FA5F08A351EFEDF345EDCFEF3C151F56CCA897DB8A76B981826ACAA4953845657FC886AFB7954652165B24D29CC6A5C2ABDC33FA3509F82D4E5880931B18355702DF927A4A1E5C8FC4F4E7EDA3497DBBCD67AFCB8FFE30EF9774395212587B5ABB98C35CD445CF73D94861298C5383978B23F07A813F152547C9175258395C74E457EC92F17F85C94F0DA517C0816D1AD249DF38EF57DFD104836CCAE83D1D2851C47DD17E9DEEB8526F20E6547A6F6629AD7F1EE8DA35FDF231F5AA3B9B9C27EE8D679243684697A1F5FBCF296A335BEFCCB644F9BD1840C35C49134723937A713E92C7A8DD64A30CC89F94B461C2F5950E718BDA0F268F6DCF71157B62590F280E8854BC98266730B358ED794503513EF9F58E2483EF9DC3F76B5BC8C4884E32D0E8EA1222E62B52484009016177132B02C965D5B48F0E29B21B0A309F734B2F1EA9CC597BCD5A02A37CB1660D78304B1A93E74E53FD32E29F2AB5FB50C8C9FEA5F719C03E3D201C27A0D32DB258ADA14D62743E636BED1212A80D1E82512FE6896A375ECB96800A9A7D395B5820CA7C23801EE3B1066C7C31298778FC5FB3F544B7C512E994EBA7B9213B2B8845CFD79C4EE9FABB512FEEA4A7DE7018E93C154F251BB0EA3B618A247EE2E52050F952CB17FB8FE5C10873353162942230D80F92528EBDD710F769B4BAF4661FF2983E30538574B7553CCA2857C06AC
3017352A341810E29A604CE20A94F5B842438B3C30485F813ADD3759717B688B038B78E64D5C665B72CACC6FA80573A8C225979DB44D8962AB0BE99EF72E71D446FF06BEF574B34D902BD42992140E61D7990AA4DA225E07A88EF481319BF6FC4D137C68FFB6675034E3CF50B140AF81260FF06DF53E7EAFC57A7220FD66491C421FF28C0FA99BA049112261E22A4BB204179347D228D178EA8B1A55B8B521E1907E6CB0528E0A825EB8BAF1729BED5A1B843028A99FD1E4F19CC8D9F2224FAE81F1E172091430AAACD6CD3F89BCC3149684C1613C0E862A722BC85419495B09E9B0ED2F70A6E2233793D69BD8B7D1D6F4857FE01AB8E3BB5DF8C55FEDBF74AFE42639D838169F2A5D4380AFEC48EC167C888BDDCCC3D2020658AADF49F8E241F34884727D5DFBC0DFDE08B94EF5ABA88DFF8110F04F131B2C299729F829E59145C56B8EFD62B84A12D3F4D0675C01317455D0B2B1535C0C979E5053C4B38AF1C28E5BAE96AFCA282C461030598B9F3FFAABFE298C7223CFE135788418A6D7294AE62960F149C6FE3D6D41124588073AE03B4DC7CE22401AD894F3EDA7387698FBBE25717714DE1004D91EED649B2BCB9741A96882F8C734F7651CD05F364DBD8AF9B763B2AA36C8CDCF6669D6AE6F40BA7860B25DBDFB9CFD300914F33A09899515EF61AB2C7F2BA8ABFDF18E3D39EA950381DB9074A69CD83CD5B5C27F6BD061B73DB4F0B5A3AE0A0EDCFCD1E6AAD719C01425F027448BF3C51B147072DD4FF14D7F587F1EA03CB1A88CDAEF123ABC097582B2AE98BC96A9E4977A270C6150BC9E5F959C15BC282C1F82C8253F3920D09003959629E0FAD985A202DD5AE4804B6E2BE2AED2D99AEA449770B8FF49232EB70496F933660F83BEBAE987B13221023D46CA873F9FC61E153F5DC3E9F74F00AF8863B0CF41365A3472DF795F1D1CCFE202BFCC9DC99659F231CB82F0C11B9BD145837589ED73B467374ED6798082AD867FDE616B0CB62EE840C5C25E8C53B9D48BF4CC0DE12B368F1890D91C60D16DAF34B7CEE8D46B5FDF70801EC9B623A00F1B386E98C14D004726FF590864FAA1AD1F977DD32A6F8EBCFCEF096ECBD271E57BF1239B0AD51E0D1D0CEF7029B11D74BDEA5E6ECE1A911169562481D48EDC9DEEF7A379E9D7193F90D4E05B82C51999DF8E280B40B966FF4BEE3CC3B238CBB2C6B32783D2C9001AA82678AB037933DCB42652125338B73FB0A52FF9A53BB81E79D8AFB9DB38C105E54F3DBAB575BCE37DB9C12796F6A9A66F170C21C6F327E4E3C1E2F07309617149545AC7179E8396BB6D4D1267228677462C35C9C164F9802F46A9715712B3B1A88E25A25BA15DEAFAAECA6EF6CBCCB6981A70B2C48657FABC6505E3325F3A2EF69A904DCD86E3667683956E0B5DE169A81DFB3C11946DC6374E9EF62CA3B408C83AB866A46B
6083B9C84B219365F312DF43D2C966C752989CD0DB3243F10F0A7FEB78C979C1FA440D5EC7E7BDD5993B0BD073756F741A158F374AA45DC816B306B03FB9E3C27E8787D7A8B614BF164553D6643CCFE030370576FD8BDBFC751B2A9F1865B1F39C0C891E8665448A0A81494E1869E60164BE5E364209D79B66DE1CFFA8793092A9F6B83814260530C690414F32CA6DD243AA83775E9B49914E2B37DDE2BA7E6781EFC2641EFB5C096809127DB01B4929D60DD58340D7F566D003404739A28FE6BD4F6087DF70A927F1D8A028FE24F64B78FBE8A1ADFCA4A5FB138E07CB93D00E518E4F40A8649BEBAB5478EFDA6FA36246A58D3ADF8C82BFF8AD0435D358C5F4C4C4EFE5031579A20115493FA42FC779E8E0B32BFBDFC69218D42A2874C67334C41F4A9AA168A616DD04C80388318CCF1D6C01E303467DF6A649F6DB412EDB9D23E67D583439A534E20C98BDB8FEF3EEFB3FD8FD8F16C6AE1AA042E2618806FB4FECE906ECB2113E9BA351E76B3D5A7703FED2FE4DE00FBA29417E690877A11F73AAC12CB942D928B84FBD059C2636321BDB02519756BA108D7E38F4A898023DE8787A0A2D719CF4368B0FB26F2EF695BD6815A016BB1FA0F3DE98963C7BA9E08BBFBD011E0A9CD9228FE8ADCF453A6ADFEEFE8C62AF39EEB9F8AF20B8435DF7C72857DC2561DF541095ACB00E6BD83B62EED7A3DA6053B80BF91F74BE83AF2F80B6DF4D5DE7C591A2FDF7AB524AC72211BC4AB3F14B8EED0157255BEEBBD4485AE7EBA0EF29BC9C83C57BE98DF3DECE3CF37589D8C63D5FD59B76579D77319C5FBC341B2F858BC09803E3196CBE7811CD2BE3A349DC690E5E9F8827E32FC0A9EB9AC2ABA37F212864042C99404D9483722FD55A6AA27FDA2F222B6A67213AC47393CC85C6775C9E1D217F4BE5818C4E38E5371BAA1FAD84368AE35BF38D3F54A6E37B1A06ED706B53BA80218C136B21E6DB898493F0B2BD3485EB1204906A6259CEA120D8074ADDCD4BB6F95C70582C08B015989A2356C76AB8BB9F669564C89FBC8A6BBC2F808621651B6CD1FBD664530DAAA118B3789648449CA6BAC8D2B502CE2A209F5F21C3DCC949DB29151080C61627500041243B2CECE6BF7BD510292FFBC1E387408B81C49F1D8CBBC296A951383A2D76FF71B4C9EA3B9438F66FD977676D05D250C901F306A2093C38F1C69A49B7F8918B6B56618234A18ED07D9DE900CCA55C8482EA633DF594855944F5BF28EB4A1C6016B62B10CF8D3AE3963ACCD6B3C21212D870A070B2A30258ABABC96302D8D1256968F71AA55071FB1529D89B50E6C1A9ED45C3D2FB6C9C7CBC30800B481E864150D411F8266F97D088CC0C1F13222361C70854E48AE4E2EBA4B543420ECCDF4DC21778B6C584806ADB8BB20857A9DFCC4A5A28D5199BBC96C982F50B4328AA32DE8D008B5EC2FB8D3BED
E68309A148FCABDAA80D62613C314F70976AD9A45D6051C690F3978D599183B1DBCC5438F7ACD9D71DF24A72E2DCF9E054DC6F4EC0C890E4F4163C30F6EA68AC819EE603039C7735371F8DC996CFCA89D6B181B19623206A85F25976A5EEDE3694F1AB3DF6DA2E0D274EBE5974DC91DFA82A431B0C93803F264B0EA5B2D7C6471E0D1ABEABC7A4D92252DBA7BA2B6764174E70BAE9711006F8ECC9584CF1A08D84E0CF35A82FD7633CBBC8D5026A6197CAC21F85A1A1619E3D72F998D000BD95772D49AA7F768FF970ABF617D77B3782CAE70AA22782242BAD243D513A734A94EF617911C185007220F2935CB56AF734F1F40F1B430C7208521D3BEED8D85FA9E35668461F4AB305FCAD04FD1973576F4DF6DCB54D8F57F4BC6B677064B52E050C52C5F9114DA61FA83274353AB404DA04C0E4B0B3EC010538373B9A3A4176084D571D21DD1B9BD9B64FF8FCC22B6B1476F607D63522EB42A849DBE2C5B5F7D6DD0119FA56FA1CC3399511A5B06D204DCFE0D695F50DD1574548527C9E40191120FC9CF1A1374B5DCF5693DEA3626064F6B5F0BD8C2EE598B1FA83639D825AD66FCAD1534EFBF9B279E5C6BD315A0CE74ACD607E558D66B37140781CAB28C1BE345C655660EB93861AFB6D75A393675ABF6BCD38CDD8FDF4806180C6FE429E5248DEA02F974493858F0E412E4FE1E847DB9245C54A482C4C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Roboto-Regular cguidfix
/F1.1/Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 383 160 rc
-1043 737 m
446 737 l
446 -195 l
-1043 -195 l
h
-1043 737 m
f
1 J
1 j
0.60000002 i
1 0 0 -1 -1043 737 cm
1372.4406 654.6933 m
1188.7219 624.17877 l
S
0 J
0 j
0 i
1180.8301 622.86798 m
1188.7219 624.17877 l
1188.2303 627.13824 m
1180.8301 622.86798 l
1189.2135 621.21936 l
S
CM
67.16214 87.113953 m
70.676857 90.628685 76.375336 90.628685 79.890053 87.113953 c
83.404785 83.599236 83.404785 77.900764 79.890053 74.386047 c
76.375336 70.871315 70.676857 70.871315 67.16214 74.386047 c
63.647408 77.900764 63.647408 83.599236 67.16214 87.113953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1110.1621 649.88605 m
1113.6769 646.37134 1119.3754 646.37134 1122.89 649.88605 c
1126.4048 653.40076 1126.4048 659.09924 1122.89 662.61395 c
1119.3754 666.12866 1113.6769 666.12866 1110.1621 662.61395 c
1106.6475 659.09924 1106.6475 653.40076 1110.1621 649.88605 c
S
0 i
1 1 1 sc
CM
173.27684 87.113953 m
176.79155 90.628685 182.49004 90.628685 186.00475 87.113953 c
189.51949 83.599236 189.51949 77.900764 186.00475 74.386047 c
182.49004 70.871315 176.79155 70.871315 173.27684 74.386047 c
169.7621 77.900764 169.7621 83.599236 173.27684 87.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1216.2769 649.88605 m
1219.7915 646.37134 1225.49 646.37134 1229.0048 649.88605 c
1232.5195 653.40076 1232.5195 659.09924 1229.0048 662.61395 c
1225.49 666.12866 1219.7915 666.12866 1216.2769 662.61395 c
1212.7621 659.09924 1212.7621 653.40076 1216.2769 649.88605 c
S
0 i
1 1 1 sc
CM
226.33418 87.113953 m
229.84891 90.628685 235.54738 90.628685 239.06209 87.113953 c
242.57683 83.599236 242.57683 77.900764 239.06209 74.386047 c
235.54738 70.871315 229.84891 70.871315 226.33418 74.386047 c
222.81946 77.900764 222.81946 83.599236 226.33418 87.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1269.3342 649.88605 m
1272.8489 646.37134 1278.5474 646.37134 1282.0621 649.88605 c
1285.5768 653.40076 1285.5768 659.09924 1282.0621 662.61395 c
1278.5474 666.12866 1272.8489 666.12866 1269.3342 662.61395 c
1265.8195 659.09924 1265.8195 653.40076 1269.3342 649.88605 c
S
0 i
1 1 1 sc
CM
279.54617 122.36395 m
283.06088 125.87868 288.75934 125.87868 292.27408 122.36395 c
295.78879 118.84924 295.78879 113.15076 292.27408 109.63605 c
288.75934 106.12132 283.06088 106.12132 279.54617 109.63605 c
276.03143 113.15076 276.03143 118.84924 279.54617 122.36395 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1322.5461 614.63605 m
1326.0609 611.12134 1331.7594 611.12134 1335.274 614.63605 c
1338.7888 618.15076 1338.7888 623.84924 1335.274 627.36395 c
1331.7594 630.87866 1326.0609 630.87866 1322.5461 627.36395 c
1319.0314 623.84924 1319.0314 618.15076 1322.5461 614.63605 c
S
0 i
1 1 1 sc
CM
14.104796 87.113953 m
17.619513 90.628685 23.317987 90.628685 26.832705 87.113953 c
30.347439 83.599236 30.347439 77.900764 26.832705 74.386047 c
23.317987 70.871315 17.619513 70.871315 14.104796 74.386047 c
10.590062 77.900764 10.590062 83.599236 14.104796 87.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1057.1047 649.88605 m
1060.6195 646.37134 1066.318 646.37134 1069.8328 649.88605 c
1073.3474 653.40076 1073.3474 659.09924 1069.8328 662.61395 c
1066.318 666.12866 1060.6195 666.12866 1057.1047 662.61395 c
1053.5901 659.09924 1053.5901 653.40076 1057.1047 649.88605 c
S
0 i
1 1 1 sc
CM
120.21949 87.113953 m
123.73421 90.628685 129.43268 90.628685 132.9474 87.113953 c
136.46213 83.599236 136.46213 77.900764 132.9474 74.386047 c
129.43268 70.871315 123.73421 70.871315 120.21949 74.386047 c
116.70476 77.900764 116.70476 83.599236 120.21949 87.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1163.2195 649.88605 m
1166.7343 646.37134 1172.4327 646.37134 1175.9474 649.88605 c
1179.4622 653.40076 1179.4622 659.09924 1175.9474 662.61395 c
1172.4327 666.12866 1166.7343 666.12866 1163.2195 662.61395 c
1159.7047 659.09924 1159.7047 653.40076 1163.2195 649.88605 c
S
1107.0261 656.25 m
1082.8688 656.25 l
S
0 J
0 j
0 i
1074.8688 656.25 m
1082.8688 656.25 l
1082.8688 659.25 m
1074.8688 656.25 l
1082.8688 653.25 l
S
1 J
1 j
0.60000002 i
1160.0835 656.25 m
1135.9261 656.25 l
S
0 J
0 j
0 i
1127.9261 656.25 m
1135.9261 656.25 l
1135.9261 659.25 m
1127.9261 656.25 l
1135.9261 653.25 l
S
1 J
1 j
0.60000002 i
1213.1407 656.25 m
1188.9834 656.25 l
S
0 J
0 j
0 i
1180.9834 656.25 m
1188.9834 656.25 l
1188.9834 659.25 m
1180.9834 656.25 l
1188.9834 653.25 l
S
1 J
1 j
0.60000002 i
1266.1981 656.25 m
1242.0408 656.25 l
S
0 J
0 j
0 i
1234.0408 656.25 m
1242.0408 656.25 l
1242.0408 659.25 m
1234.0408 656.25 l
1242.0408 653.25 l
S
1 1 1 sc
CM
120.21949 122.36395 m
123.73421 125.87868 129.43268 125.87868 132.9474 122.36395 c
136.46213 118.84924 136.46213 113.15076 132.9474 109.63605 c
129.43268 106.12132 123.73421 106.12132 120.21949 109.63605 c
116.70476 113.15076 116.70476 118.84924 120.21949 122.36395 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1163.2195 614.63605 m
1166.7343 611.12134 1172.4327 611.12134 1175.9474 614.63605 c
1179.4622 618.15076 1179.4622 623.84924 1175.9474 627.36395 c
1172.4327 630.87866 1166.7343 630.87866 1163.2195 627.36395 c
1159.7047 623.84924 1159.7047 618.15076 1163.2195 614.63605 c
S
1319.4102 621 m
1188.9834 621 l
S
0 J
0 j
0 i
1180.9834 621 m
1188.9834 621 l
1188.9834 624 m
1180.9834 621 l
1188.9834 618 l
S
1 J
1 j
0.60000002 i
1161.6692 626.25806 m
1132.6864 645.51349 l
S
0 J
0 j
0 i
1126.0229 649.94055 m
1132.6864 645.51349 l
1134.3466 648.01227 m
1126.0229 649.94055 l
1131.0262 643.01471 l
S
1 1 1 sc
CM
173.27684 50.363953 m
176.79155 53.878689 182.49004 53.878689 186.00475 50.363953 c
189.51949 46.849239 189.51949 41.150761 186.00475 37.636047 c
182.49004 34.121311 176.79155 34.121311 173.27684 37.636047 c
169.7621 41.150761 169.7621 46.849239 173.27684 50.363953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1216.2769 686.63605 m
1219.7915 683.12134 1225.49 683.12134 1229.0048 686.63605 c
1232.5195 690.15076 1232.5195 695.84924 1229.0048 699.36395 c
1225.49 702.87866 1219.7915 702.87866 1216.2769 699.36395 c
1212.7621 695.84924 1212.7621 690.15076 1216.2769 686.63605 c
S
1214.83 687.58984 m
1185.5327 667.29718 l
S
0 J
0 j
0 i
1178.9562 662.742 m
1185.5327 667.29718 l
1183.8245 669.76337 m
1178.9562 662.742 l
1187.241 664.83099 l
S
1 1 1 sc
CM
279.39154 87.113953 m
282.90625 90.628685 288.60474 90.628685 292.11945 87.113953 c
295.63419 83.599236 295.63419 77.900764 292.11945 74.386047 c
288.60474 70.871315 282.90625 70.871315 279.39154 74.386047 c
275.8768 77.900764 275.8768 83.599236 279.39154 87.113953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1322.3915 649.88605 m
1325.9062 646.37134 1331.6047 646.37134 1335.1194 649.88605 c
1338.6342 653.40076 1338.6342 659.09924 1335.1194 662.61395 c
1331.6047 666.12866 1325.9062 666.12866 1322.3915 662.61395 c
1318.8768 659.09924 1318.8768 653.40076 1322.3915 649.88605 c
S
0 i
0.64705884 0.64705884 0.64705884 sc
CM
332.44888 87.113953 m
335.96359 90.628685 341.66208 90.628685 345.17679 87.113953 c
348.69153 83.599236 348.69153 77.900764 345.17679 74.386047 c
341.66208 70.871315 335.96359 70.871315 332.44888 74.386047 c
328.93414 77.900764 328.93414 83.599236 332.44888 87.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 737 cm
1375.4489 649.88605 m
1378.9636 646.37134 1384.6621 646.37134 1388.1768 649.88605 c
1391.6915 653.40076 1391.6915 659.09924 1388.1768 662.61395 c
1384.6621 666.12866 1378.9636 666.12866 1375.4489 662.61395 c
1371.9342 659.09924 1371.9342 653.40076 1375.4489 649.88605 c
S
1372.3129 656.25 m
1348.1555 656.25 l
S
0 J
0 j
0 i
1340.1555 656.25 m
1348.1555 656.25 l
1348.1555 659.25 m
1340.1555 656.25 l
1348.1555 653.25 l
S
1 J
1 j
0.60000002 i
1319.2555 656.25 m
1295.0981 656.25 l
S
0 J
0 j
0 i
1287.0981 656.25 m
1295.0981 656.25 l
1295.0981 659.25 m
1287.0981 656.25 l
1295.0981 653.25 l
S
1 0 0 -1 206.5625 138.60428 cm
/F1.1[ 10 0 0 -10 0 0]sf
-29.108887 3.5 m
(!"#"$%&'"\(\))[ 5.683594 5.224609 4.965820 5.288086 2.519531 5.683594 5.683594 8.740234 5.288086 5.683594 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 352.0625 101 cm
-15.820312 3.5 m
('*+\)",)[ 8.740234 5.498047 5.229492 3.457031 5.288086 0.000000 ] xS
/Cs1 SC
0 0 0 sc
1 0 0 -1 190.0625 21.604279 cm
-12.709961 3.5 m
(-%\)./)[ 5.683594 5.683594 3.457031 5.566406 0.000000 ] xS
1 J
1 j
0.60000002 i
1 0 0 -1 -1043 737 cm
1373.9056 650.98132 m
1345.0559 631.75824 l
S
0 J
0 j
0 i
1338.3984 627.32227 m
1345.0559 631.75824 l
1343.3925 634.25476 m
1338.3984 627.32227 l
1346.7195 629.26166 l
S
1 J
1 j
0.60000002 i
1 1 1 sc
1230.4517 687.58984 m
1259.7489 667.29718 l
S
0 J
0 j
0 i
1266.3253 662.742 m
1259.7489 667.29718 l
1258.0406 664.83105 m
1266.3253 662.742 l
1261.457 669.76337 l
S
0 0 0 sc
1 0 0 -1 100.0625 131 cm
-18.415527 3.5 m
(0012"3!)[ 5.629883 5.629883 5.634766 5.629883 5.288086 3.334961 0.000000 ] xS
ep
end
%%Trailer
%%EOF
