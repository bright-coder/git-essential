%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 418.000000 391.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 418 391
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 418 391
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /r put
dup 36 /v put
dup 37 /P put
dup 38 /o put
dup 39 /j put
dup 40 /c put
dup 41 /t put
dup 42 /space put
dup 43 /A put
dup 44 /B put
dup 45 /C put
dup 46 /m put
dup 47 /p put
dup 48 /u put
dup 49 /l put
dup 50 /i put
dup 51 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





013B0009022C004001F4000E04BE00370000004800480078013C01AA021202A60318038003AA03E80402049C04E40584061C064A069C06EC070C07420001000000150096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/B 3 def
/C 4 def
/P 5 def
/S 6 def
/c 7 def
/e 8 def
/i 9 def
/j 10 def
/l 11 def
/m 12 def
/n 13 def
/o 14 def
/p 15 def
/r 16 def
/t 17 def
/u 18 def
/v 19 def
/uni2B91 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92633B2598E0B1EDFA3C2732C9D3498122A5E23C1999619F9F2A05B051C0B681D7A669278A382A773898B9BA5E74E76D79507B26C6A220110B20D37F5163FA090532B073A3E57F242B478333FC8C597B4F9DCA3AC30189126322ADFD8883C4D8EFE8F6FD94BC0657830BA114C29774027D350576FF1A8FB8C309660BEEB88A25164FF720FB75BE7503C1717948AAEAC1EC06EB48ECE0B3C7BDA3C3EF1F9D700AB784A03BCF54C80E53FAB92DCED61C6315008719347003712E246D8F24FE0DECDD4B6FFF7D2250609EB2CD43D8F029CB09E9F9C446F4CC2B4964CDE90E25726C41CCA398A6BF913029D4EF76C8456D125BFC43E1569E5B78156C24AC97CFD0110111CCAE6A2EE755AF900CFD0BDE4C25AA471A7B114887A6025773AF1DF79014F3345FCDAA83E0F63A02BE8A2AFB1D120CB0B624DF37801D52C02CBB8E9AA90DB0076C2FA23F223F8319EE17E29BFCEBDDCE86F451A518165332596D5E8415D14C22B1F57B62C315C78BFA05EC23C2800BCDDD8A709B05E43C9C13DB46B271F526A35203EB7C292F09D92220D22A8994C65C43A543E7B2B0784254BD4FD167431E501F73F961B824A9DF8158B77938F485904952E9E17FF95CB384BC86ECCCD99FF72EE49F635B32DBE45E5A2392515D484AA8D7E3B25DDAD6B89B8416CBD8062FC5E6C96EF1EF7F6913DA0FA90668280EA350B64B5AF203877534A03E88A4332E96F85859184B4FD7F0B1FFE57D09B5C067DC6685BBB2E96C74C7DA78CD90C87D

BE3BB3580358BEA08380BC470DBD90C31C9D8405B64098CBB21C0BBC992E65BF0622695A78C305D41B9DF94EF054CF6C85AF8E4BF312143B928A613EF618786C7460C365D0F4389A3638B6204AB732A3172A6EC6F35363AE4FA2A33E5721879FB737F273CD43215284465167B0A3ADE850148B49FB0A0E99B6A88E4E2389D5CF97B1AC7A6F3F9B756090F8BD1C1F13A7CFF0B2C37014B5414516712E68E58D7708BF3AF22AC52D7A32C232B77E3209DFF7DD1F860B8D8B04D037BA2C0E767F4260EEF0709E5192F11C305AF3BA667E68716C5BC39FA983678B0CC6D0DC01D65F5416F71097219B9DC1A26C5CB89E953B53E0C5C183E14E63231763F2066CB882006415CD595DA728F15CE44BCA51F7C2FF4CFC158252ECB240EBD40C81C610BD2B475A7C0BAE90FA8C1B2010A4FDD389342065228A65617C7902AA5D30FB9636DB2CD25A46B4B95F69EA5B47AFB6FDF0A63FE2037DB9B2E605F443258B41B75F602205B8B06219A1D5BB2A768B8B0F5CE12F09F07F06941A259D9F76330DB6CA60B145A5329D0DDC703327E66B0757445AF50B22447DB51F096A1377970A79D94C4EC23CA3DBC4367E3335F3C86022726DB543BC4467EAA08D7CC0326FD61F15DF31C3A78111F203CBBAFF8B08B52050C50C83DC9EA0C1278EED715EED2D3BC0DB34C165F9907378B3D658DBC3503432CE5FAFF8E91C02352921DBFF2B99C34984302F5FB449B2C469D442148B2ECFB012106E024A896F774016D5D28A02A03EFE1534573699601D63A99565029D9569B17E57F1CDC214A45BB162AE85897AE7561C703F45948C946C3CE8043D6D42D819AEA830AD7ADCCBC86033B84114E7CF80A4773E4AFFF9045F31A632DDEDFF0057D73A96E913BB1A65586C7E74F63D8B1897FF60FDFB91E8607F0686507389EB6BBD1E764375631321C3A85683A05AE6C9DF1B888BEB75C54B2CAADFAE3F90F6978955344C11B19BA1D94430A3978003196C678F9B15B48DD731C22A7D16376C446F77C05352C6DAA451C59CE61C10C55765DEA677F33B310C442E1E7E5A5D693809CAC711FC0AC23FB02990D507D1B5AE5733233547866B07F7C7C6A39136C4829D9F42093DB2F6386CF0A657CBDC00807544FEF93BF35D33849D2952165BB307A0E37F0FA02A305C74FDE0520C4C498CE4E53B3B0F4A8FDB48190F5A3817F5E5394B318A65E7133E720C6D739FA96C0A7032D82DFEF19F61F89E645AD5D6A12C60E61D67182330EEC45C257AD45BA2EF21D2CED06CF328FB5EE804422D7C82DC52CFDAAB606CCEB086999D7F53D2B5D2CB2DAF21EF1BEBF305A076DE23E2D52AEF0CC33B82DB4F7CD0E39F7E432DA435CECCD2EC441C396C01D4071B1E010BB0EFD4FFFFB0A304A9ACF9BD3ABD1E33CD4C470111DBA0A505F63E1202AC0147A5D6F04C27F9D8B07151E6119B6EDCD5
0A09B55E072F4DE8DB12D4700EC0A9EB0AD9BAB510D91B0DAA4B77D2A0A05D9E50750009C697CA00A1916C8AE66673D29A0399ABD0D6182688D80BA630AA49C5981456C939055A16EBD1F7816BBDFC7A7E0FEBE7152771A382802E49EDC1A9EE805ED2EBA54973DC3E534EA188945B14FEACFE5BBFA5BE07199C93277C74A64A2340F640420422058A24581985E52840FE7990EAC0A11E456DF5790E2F5366B4D0840D0F8E13BC78748BE23F59EBF13FB321291CECF59E50BCD0D72155AEF2FA8A3F671783E461C23489A284E046506B987407311AAE809A0754ECA199CBC81C452A8DD50167AC88E2E63B973903E9E0B8CEE307679C8286722801C0C942F748BC721835B4933E1960BB09668142E4FC35B690BC9A6C7C9F70FFC8E5DCD65BBF2511E025F836A30B8F914A9F6D189DF29443774857E1839B9801DCB7B09AAEB5AD8C97C616EC08C6EFDE388E4F806147996C9EC9482D48D312523784B52F3C17192A9E7F3252913CF755EBE7060564D06C868D6C7825CCA943E3C42274A2A6BBFC02EB7D2D49F822C064CC7F15D490CF1FDEE5B5523A66705E58A5222AD4D5A6ABC67C1F48DE9EF8F3E690B798D4516295F8F4845210D622E61ED7C010CF0A83277A960B0A287586374394072E825529B6B2A0BC5AFBAD4B40142154B375BAD86B82FF04680AD656D4E9357DAE48457AE6D78F70B5F7C81058897310E6A01BD8858C23962617D89C988D207F63E1E3B07EBC61EFC6E7D2BC1C5FE356EFC5680A4DF90963FBCFDFA23A67FB561B5533F45FB1216664A99FF73222CF936C7A12DEAAEE0B030D15836339FA0C4E9A68014EA8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 418 391 rc
-682 929 m
479 929 l
479 -61 l
-682 -61 l
h
-682 929 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -682 929 cm
693 756 m
1089 756 l
S
0 i
1 1 1 sc
CM
247.18373 364.18372 m
268.27213 343.09543 268.27213 308.90457 247.18373 287.81628 c
226.09543 266.72787 191.90457 266.72787 170.81627 287.81628 c
149.72787 308.90457 149.72787 343.09543 170.81627 364.18372 c
191.90457 385.27213 226.09543 385.27213 247.18373 364.18372 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -682 929 cm
929.18372 564.81628 m
950.27216 585.9046 950.27216 620.0954 929.18372 641.18372 c
908.0954 662.27216 873.9046 662.27216 852.81628 641.18372 c
831.72784 620.0954 831.72784 585.9046 852.81628 564.81628 c
873.9046 543.72784 908.0954 543.72784 929.18372 564.81628 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 326 cm
/F1.1[ 16 0 0 -16 0 0]sf
-23.104 5.776001 m
(!"#$"#)[ 10.368000 8.592000 5.328000 8.000000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
169.22 290 m
239.78 290 l
248.12624 290 254.89999 281.936 254.89999 272 c
254.89999 262.064 248.12624 254 239.78 254 c
169.22 254 l
160.87376 254 154.10001 262.064 154.10001 272 c
154.10001 281.936 160.87376 290 169.22 290 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -682 929 cm
851.21997 639 m
921.78003 639 l
930.12622 639 936.90002 647.06403 936.90002 657 c
936.90002 666.93597 930.12622 675 921.78003 675 c
851.21997 675 l
842.87378 675 836.09998 666.93597 836.09998 657 c
836.09998 647.06403 842.87378 639 851.21997 639 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 204.5 272 cm
-32.591999 5.776001 m
(%#&'"\(\)*+)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
170.12 254 m
240.67999 254 l
249.02625 254 255.8 245.936 255.8 236 c
255.8 226.064 249.02625 218 240.67999 218 c
170.12 218 l
161.77376 218 155 226.064 155 236 c
155 245.936 161.77376 254 170.12 254 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -682 929 cm
852.12 675 m
922.67999 675 l
931.02625 675 937.79999 683.06403 937.79999 693 c
937.79999 702.93597 931.02625 711 922.67999 711 c
852.12 711 l
843.77374 711 837 702.93597 837 693 c
837 683.06403 843.77374 675 852.12 675 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 205.39999 236 cm
-32.888 5.776001 m
(%#&'"\(\)*,)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
247.18373 121.18372 m
268.27213 100.09543 268.27213 65.904572 247.18373 44.816277 c
226.09543 23.727873 191.90457 23.727873 170.81627 44.816277 c
149.72787 65.904572 149.72787 100.09543 170.81627 121.18372 c
191.90457 142.27213 226.09543 142.27213 247.18373 121.18372 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -682 929 cm
929.18372 807.81628 m
950.27216 828.9046 950.27216 863.0954 929.18372 884.18372 c
908.0954 905.27216 873.9046 905.27216 852.81628 884.18372 c
831.72784 863.0954 831.72784 828.9046 852.81628 807.81628 c
873.9046 786.72784 908.0954 786.72784 929.18372 807.81628 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 83 cm
-35.863998 -12.447998 m
(-&./0\)"#)[ 11.552000 9.184000 13.648000 9.488000 8.896000 5.040000 8.592000 0.000000 ] xS
-5.184 24 m
(+)s
/Cs1 SC
1 1 1 sc
CM
173.72 47 m
244.28 47 l
252.62624 47 259.39999 38.936001 259.39999 29 c
259.39999 19.063999 252.62624 11 244.28 11 c
173.72 11 l
165.37376 11 158.60001 19.063999 158.60001 29 c
158.60001 38.936001 165.37376 47 173.72 47 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -682 929 cm
855.71997 882 m
926.28003 882 l
934.62622 882 941.40002 890.06403 941.40002 900 c
941.40002 909.93597 934.62622 918 926.28003 918 c
855.71997 918 l
847.37378 918 840.59998 909.93597 840.59998 900 c
840.59998 890.06403 847.37378 882 855.71997 882 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 209 29 cm
-32.591999 5.776001 m
(%#&'"\(\)*+)[ 10.368000 5.040000 9.184000 3.552000 8.592000 8.592000 5.040000 4.448000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -682 929 cm
943.25769 616.64087 m
1039.7397 655.5448 1028.0605 750.37433 951.52216 811.27057 c
S
0 i
CM
260.51041 111.07954 m
272.0162 114.35013 l
267.02863 121.10913 l
h
260.51041 111.07954 m
f
0 J
0 j
1 0 0 -1 -682 929 cm
942.51044 817.92047 m
954.01617 814.6499 l
949.02863 807.89087 l
h
942.51044 817.92047 m
S
/Cs2 SC
0 sc
1 0 0 -1 39.5 203 cm
-23.5 5.776001 m
(!"#$"#)[ 10.368000 8.592000 5.328000 8.000000 8.592000 0.000000 ] xS
1 0 0 -1 39.5 147 cm
-21 5.776001 m
(-12"3\))[ 11.552000 3.552000 3.552000 8.592000 8.896000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
