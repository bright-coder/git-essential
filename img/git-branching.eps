%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 359.000000 112.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 359 112
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 359 112
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 359 112 rc
-1043 713 m
420 713 l
420 -219 l
-1043 -219 l
h
-1043 713 m
f
67.16214 63.113953 m
70.676857 66.628685 76.375336 66.628685 79.890053 63.113953 c
83.404785 59.599239 83.404785 53.900761 79.890053 50.386047 c
76.375336 46.871311 70.676857 46.871311 67.16214 50.386047 c
63.647408 53.900761 63.647408 59.599239 67.16214 63.113953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1110.1621 649.88605 m
1113.6769 646.37134 1119.3754 646.37134 1122.89 649.88605 c
1126.4048 653.40076 1126.4048 659.09924 1122.89 662.61395 c
1119.3754 666.12866 1113.6769 666.12866 1110.1621 662.61395 c
1106.6475 659.09924 1106.6475 653.40076 1110.1621 649.88605 c
S
0 i
1 1 1 sc
CM
173.27684 63.113953 m
176.79155 66.628685 182.49004 66.628685 186.00475 63.113953 c
189.51949 59.599239 189.51949 53.900761 186.00475 50.386047 c
182.49004 46.871311 176.79155 46.871311 173.27684 50.386047 c
169.7621 53.900761 169.7621 59.599239 173.27684 63.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1216.2769 649.88605 m
1219.7915 646.37134 1225.49 646.37134 1229.0048 649.88605 c
1232.5195 653.40076 1232.5195 659.09924 1229.0048 662.61395 c
1225.49 666.12866 1219.7915 666.12866 1216.2769 662.61395 c
1212.7621 659.09924 1212.7621 653.40076 1216.2769 649.88605 c
S
0 i
1 1 1 sc
CM
226.33418 63.113953 m
229.84891 66.628685 235.54738 66.628685 239.06209 63.113953 c
242.57683 59.599239 242.57683 53.900761 239.06209 50.386047 c
235.54738 46.871311 229.84891 46.871311 226.33418 50.386047 c
222.81946 53.900761 222.81946 59.599239 226.33418 63.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1269.3342 649.88605 m
1272.8489 646.37134 1278.5474 646.37134 1282.0621 649.88605 c
1285.5768 653.40076 1285.5768 659.09924 1282.0621 662.61395 c
1278.5474 666.12866 1272.8489 666.12866 1269.3342 662.61395 c
1265.8195 659.09924 1265.8195 653.40076 1269.3342 649.88605 c
S
0 i
1 1 1 sc
CM
173.27684 98.363953 m
176.79155 101.87868 182.49004 101.87868 186.00475 98.363953 c
189.51949 94.849236 189.51949 89.150764 186.00475 85.636047 c
182.49004 82.121315 176.79155 82.121315 173.27684 85.636047 c
169.7621 89.150764 169.7621 94.849236 173.27684 98.363953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1216.2769 614.63605 m
1219.7915 611.12134 1225.49 611.12134 1229.0048 614.63605 c
1232.5195 618.15076 1232.5195 623.84924 1229.0048 627.36395 c
1225.49 630.87866 1219.7915 630.87866 1216.2769 627.36395 c
1212.7621 623.84924 1212.7621 618.15076 1216.2769 614.63605 c
S
0 i
1 1 1 sc
CM
14.104796 63.113953 m
17.619513 66.628685 23.317987 66.628685 26.832705 63.113953 c
30.347439 59.599239 30.347439 53.900761 26.832705 50.386047 c
23.317987 46.871311 17.619513 46.871311 14.104796 50.386047 c
10.590062 53.900761 10.590062 59.599239 14.104796 63.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1057.1047 649.88605 m
1060.6195 646.37134 1066.318 646.37134 1069.8328 649.88605 c
1073.3474 653.40076 1073.3474 659.09924 1069.8328 662.61395 c
1066.318 666.12866 1060.6195 666.12866 1057.1047 662.61395 c
1053.5901 659.09924 1053.5901 653.40076 1057.1047 649.88605 c
S
0 i
1 1 1 sc
CM
120.21949 63.113953 m
123.73421 66.628685 129.43268 66.628685 132.9474 63.113953 c
136.46213 59.599239 136.46213 53.900761 132.9474 50.386047 c
129.43268 46.871311 123.73421 46.871311 120.21949 50.386047 c
116.70476 53.900761 116.70476 59.599239 120.21949 63.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1163.2195 649.88605 m
1166.7343 646.37134 1172.4327 646.37134 1175.9474 649.88605 c
1179.4622 653.40076 1179.4622 659.09924 1175.9474 662.61395 c
1172.4327 666.12866 1166.7343 666.12866 1163.2195 662.61395 c
1159.7047 659.09924 1159.7047 653.40076 1163.2195 649.88605 c
S
1107.0261 656.25 m
1082.8688 656.25 l
S
0 J
0 j
0 i
1074.8688 656.25 m
1082.8688 656.25 l
1082.8688 659.25 m
1074.8688 656.25 l
1082.8688 653.25 l
S
1 J
1 j
0.60000002 i
1160.0835 656.25 m
1135.9261 656.25 l
S
0 J
0 j
0 i
1127.9261 656.25 m
1135.9261 656.25 l
1135.9261 659.25 m
1127.9261 656.25 l
1135.9261 653.25 l
S
1 J
1 j
0.60000002 i
1213.1407 656.25 m
1188.9834 656.25 l
S
0 J
0 j
0 i
1180.9834 656.25 m
1188.9834 656.25 l
1188.9834 659.25 m
1180.9834 656.25 l
1188.9834 653.25 l
S
1 J
1 j
0.60000002 i
1266.1981 656.25 m
1242.0408 656.25 l
S
0 J
0 j
0 i
1234.0408 656.25 m
1242.0408 656.25 l
1242.0408 659.25 m
1234.0408 656.25 l
1242.0408 653.25 l
S
1 1 1 sc
CM
120.21949 98.363953 m
123.73421 101.87868 129.43268 101.87868 132.9474 98.363953 c
136.46213 94.849236 136.46213 89.150764 132.9474 85.636047 c
129.43268 82.121315 123.73421 82.121315 120.21949 85.636047 c
116.70476 89.150764 116.70476 94.849236 120.21949 98.363953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1163.2195 614.63605 m
1166.7343 611.12134 1172.4327 611.12134 1175.9474 614.63605 c
1179.4622 618.15076 1179.4622 623.84924 1175.9474 627.36395 c
1172.4327 630.87866 1166.7343 630.87866 1163.2195 627.36395 c
1159.7047 623.84924 1159.7047 618.15076 1163.2195 614.63605 c
S
1213.1407 621 m
1188.9834 621 l
S
0 J
0 j
0 i
1180.9834 621 m
1188.9834 621 l
1188.9834 624 m
1180.9834 621 l
1188.9834 618 l
S
1 J
1 j
0.60000002 i
1161.6697 626.25879 m
1132.6887 645.51697 l
S
0 J
0 j
0 i
1126.0256 649.94458 m
1132.6887 645.51697 l
1134.349 648.01556 m
1126.0256 649.94458 l
1131.0283 643.01831 l
S
1 1 1 sc
CM
173.27684 26.363955 m
176.79155 29.878689 182.49004 29.878689 186.00475 26.363955 c
189.51949 22.849237 189.51949 17.150763 186.00475 13.636046 c
182.49004 10.121312 176.79155 10.121312 173.27684 13.636046 c
169.7621 17.150763 169.7621 22.849237 173.27684 26.363955 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1216.2769 686.63605 m
1219.7915 683.12134 1225.49 683.12134 1229.0048 686.63605 c
1232.5195 690.15076 1232.5195 695.84924 1229.0048 699.36395 c
1225.49 702.87866 1219.7915 702.87866 1216.2769 699.36395 c
1212.7621 695.84924 1212.7621 690.15076 1216.2769 686.63605 c
S
1214.827 687.59399 m
1185.519 667.31683 l
S
0 J
0 j
0 i
1178.9402 662.76508 m
1185.519 667.31683 l
1183.8121 669.78387 m
1178.9402 662.76508 l
1187.226 664.84973 l
S
1 1 1 sc
CM
279.39154 63.113953 m
282.90625 66.628685 288.60474 66.628685 292.11945 63.113953 c
295.63419 59.599239 295.63419 53.900761 292.11945 50.386047 c
288.60474 46.871311 282.90625 46.871311 279.39154 50.386047 c
275.8768 53.900761 275.8768 59.599239 279.39154 63.113953 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1322.3915 649.88605 m
1325.9062 646.37134 1331.6047 646.37134 1335.1194 649.88605 c
1338.6342 653.40076 1338.6342 659.09924 1335.1194 662.61395 c
1331.6047 666.12866 1325.9062 666.12866 1322.3915 662.61395 c
1318.8768 659.09924 1318.8768 653.40076 1322.3915 649.88605 c
S
0 i
1 1 1 sc
CM
332.44888 63.113953 m
335.96359 66.628685 341.66208 66.628685 345.17679 63.113953 c
348.69153 59.599239 348.69153 53.900761 345.17679 50.386047 c
341.66208 46.871311 335.96359 46.871311 332.44888 50.386047 c
328.93414 53.900761 328.93414 59.599239 332.44888 63.113953 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1043 713 cm
1375.4489 649.88605 m
1378.9636 646.37134 1384.6621 646.37134 1388.1768 649.88605 c
1391.6915 653.40076 1391.6915 659.09924 1388.1768 662.61395 c
1384.6621 666.12866 1378.9636 666.12866 1375.4489 662.61395 c
1371.9342 659.09924 1371.9342 653.40076 1375.4489 649.88605 c
S
1372.3129 656.25 m
1348.1555 656.25 l
S
0 J
0 j
0 i
1340.1555 656.25 m
1348.1555 656.25 l
1348.1555 659.25 m
1340.1555 656.25 l
1348.1555 653.25 l
S
1 J
1 j
0.60000002 i
1319.2555 656.25 m
1295.0981 656.25 l
S
0 J
0 j
0 i
1287.0981 656.25 m
1295.0981 656.25 l
1295.0981 659.25 m
1287.0981 656.25 l
1295.0981 653.25 l
S
ep
end
%%Trailer
%%EOF
